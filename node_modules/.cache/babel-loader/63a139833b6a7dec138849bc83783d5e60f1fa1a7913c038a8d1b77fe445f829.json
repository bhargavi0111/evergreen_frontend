{"ast":null,"code":"// // src/redux/types/cartTypes.js\n\n// // src/redux/actions/cartActions.js\n// import axios from 'axios';\n// export const FETCH_CART_ITEMS = 'FETCH_CART_ITEMS';\n// export const ADD_TO_CART = 'ADD_TO_CART';\n// export const REMOVE_FROM_CART = 'REMOVE_FROM_CART';\n// export const UPDATE_CART_QUANTITY = 'UPDATE_CART_QUANTITY';\n\n// export const fetchCartItems = (userId) => async (dispatch) => {\n//   try {\n//     const response = await axios.get(`/cart/addtocart/${userId}`);\n//     dispatch({\n//       type: FETCH_CART_ITEMS,\n//       payload: response.data,\n//     });\n//   } catch (error) {\n//     console.error('Error fetching cart items:', error);\n//   }\n// };\n\n// export const addToCart = (product) => async (dispatch, getState) => {\n//   try {\n//     const { user } = getState().auth; // Assuming you have an auth reducer with user info\n//     if (!user) {\n//       throw new Error('User not authenticated');\n//     }\n\n//     const response = await axios.post('/api/addtocart', {\n//       userId: user._id,\n//       productId: product._id,\n//       quantity: 1, // You can modify this if you want to allow adding multiple quantities\n//     });\n\n//     dispatch({\n//       type: ADD_TO_CART,\n//       payload: {\n//         ...product,\n//         quantity: 1,\n//       },\n//     });\n\n//     // Optionally, you can fetch the updated cart after adding an item\n//     dispatch(fetchCartItems(user._id));\n//   } catch (error) {\n//     console.error('Error adding to cart:', error);\n//     // Handle error (e.g., show an error message to the user)\n//   }\n// };\n// src/redux/cartActions.js\n\n// Add to Cart\n\nimport axios from 'axios';\n\n// Action Types\nexport const GET_CART = 'GET_CART';\nexport const ADD_TO_CART = 'ADD_TO_CART';\nexport const REMOVE_FROM_CART = 'REMOVE_FROM_CART';\nexport const CART_ERROR = 'CART_ERROR';\nconst API_URL = 'http://localhost:4000/cart';\n\n// Ensure that you're accessing the correct part of the state\n\n// Action Creators\n\n// // Add product to cart\n// export const addToCart = (product) => async (dispatch, getState) => {\n//   try {\n//     console.log(\"add to cart started\");\n\n//     // Retrieve the token from Redux state\n//     const { token } = getState().user; \n//     if (!token) {\n//       console.error(\"No token found\");\n//       return;\n//     }\n\n//     console.log(\"Token retrieved:\", token);\n\n//     // Authorization headers\n//     const config = {\n//       headers: {\n//         'Content-Type': 'application/json',\n//         'Authorization': `Bearer ${token}` \n//       }\n//     };\n\n//     console.log(\"Authorization headers set\");\n\n//     // Making API request\n//     const res = await axios.post('http://localhost:4000/cart/addtocart', {\n//       itemId: product._id\n//     }, config);\n\n//     console.log(\"API response:\", res);\n\n//     // Dispatch success action\n//     dispatch({\n//       type: ADD_TO_CART,\n//       payload: res.data\n//     });\n\n//     console.log(\"Product added to cart\");\n\n//   } catch (error) {\n//     console.error(\"Error adding to cart:\", error.response?.data || error.message);\n\n//     dispatch({\n//       type: CART_ERROR,\n//       payload: error.response?.data || 'An error occurred'\n//     });\n//   }\n// };\n// Example of an action to add to the cart\\\n\n// cartActions.jsx\n\nexport const addToCart = productId => async dispatch => {\n  try {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      throw new Error('User not authenticated');\n    }\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}` // Attach the token\n      }\n    };\n\n    const response = await axios.post(`${API_URL}/cart/addtocart`, {\n      productId\n    }, config);\n    dispatch({\n      type: 'ADD_TO_CART_SUCCESS',\n      payload: response.data\n    });\n  } catch (error) {\n    dispatch({\n      type: 'ADD_TO_CART_FAIL',\n      payload: error.response ? error.response.data : error.message\n    });\n    console.error('Error adding to cart:', error.message);\n  }\n};\nexport const getCart = () => async dispatch => {\n  try {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      throw new Error('User not authenticated');\n    }\n    const config = {\n      headers: {\n        'Authorization': `Bearer ${token}` // Attach the token\n      }\n    };\n\n    const response = await axios.get('/api/cart', config);\n    dispatch({\n      type: 'GET_CART_SUCCESS',\n      payload: response.data\n    });\n  } catch (error) {\n    dispatch({\n      type: 'GET_CART_FAIL',\n      payload: error.response ? error.response.data : error.message\n    });\n    console.error('Error getting cart:', error.message);\n  }\n};\nexport const removeFromCart = productId => async dispatch => {\n  try {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      throw new Error('User not authenticated');\n    }\n    const config = {\n      headers: {\n        'Authorization': `Bearer ${token}` // Attach the token\n      }\n    };\n\n    const response = await axios.delete(`/api/cart/remove/${productId}`, config);\n    dispatch({\n      type: 'REMOVE_FROM_CART_SUCCESS',\n      payload: response.data\n    });\n  } catch (error) {\n    dispatch({\n      type: 'REMOVE_FROM_CART_FAIL',\n      payload: error.response ? error.response.data : error.message\n    });\n    console.error('Error removing from cart:', error.message);\n  }\n};","map":{"version":3,"names":["axios","GET_CART","ADD_TO_CART","REMOVE_FROM_CART","CART_ERROR","API_URL","addToCart","productId","dispatch","token","localStorage","getItem","Error","config","headers","response","post","type","payload","data","error","message","console","getCart","get","removeFromCart","delete"],"sources":["C:/Users/bhargavi_g/Documents/Nursery_live/frontend/src/redux/actions/cartActions.jsx"],"sourcesContent":["// // src/redux/types/cartTypes.js\r\n\r\n// // src/redux/actions/cartActions.js\r\n// import axios from 'axios';\r\n// export const FETCH_CART_ITEMS = 'FETCH_CART_ITEMS';\r\n// export const ADD_TO_CART = 'ADD_TO_CART';\r\n// export const REMOVE_FROM_CART = 'REMOVE_FROM_CART';\r\n// export const UPDATE_CART_QUANTITY = 'UPDATE_CART_QUANTITY';\r\n\r\n\r\n\r\n// export const fetchCartItems = (userId) => async (dispatch) => {\r\n//   try {\r\n//     const response = await axios.get(`/cart/addtocart/${userId}`);\r\n//     dispatch({\r\n//       type: FETCH_CART_ITEMS,\r\n//       payload: response.data,\r\n//     });\r\n//   } catch (error) {\r\n//     console.error('Error fetching cart items:', error);\r\n//   }\r\n// };\r\n\r\n// export const addToCart = (product) => async (dispatch, getState) => {\r\n//   try {\r\n//     const { user } = getState().auth; // Assuming you have an auth reducer with user info\r\n//     if (!user) {\r\n//       throw new Error('User not authenticated');\r\n//     }\r\n\r\n//     const response = await axios.post('/api/addtocart', {\r\n//       userId: user._id,\r\n//       productId: product._id,\r\n//       quantity: 1, // You can modify this if you want to allow adding multiple quantities\r\n//     });\r\n\r\n//     dispatch({\r\n//       type: ADD_TO_CART,\r\n//       payload: {\r\n//         ...product,\r\n//         quantity: 1,\r\n//       },\r\n//     });\r\n\r\n//     // Optionally, you can fetch the updated cart after adding an item\r\n//     dispatch(fetchCartItems(user._id));\r\n//   } catch (error) {\r\n//     console.error('Error adding to cart:', error);\r\n//     // Handle error (e.g., show an error message to the user)\r\n//   }\r\n// };\r\n// src/redux/cartActions.js\r\n\r\n// Add to Cart\r\n\r\n\r\nimport axios from 'axios';\r\n\r\n// Action Types\r\nexport const GET_CART = 'GET_CART';\r\nexport const ADD_TO_CART = 'ADD_TO_CART';\r\nexport const REMOVE_FROM_CART = 'REMOVE_FROM_CART';\r\nexport const CART_ERROR = 'CART_ERROR';\r\nconst API_URL = 'http://localhost:4000/cart';\r\n\r\n// Ensure that you're accessing the correct part of the state\r\n\r\n\r\n// Action Creators\r\n\r\n// // Add product to cart\r\n// export const addToCart = (product) => async (dispatch, getState) => {\r\n//   try {\r\n//     console.log(\"add to cart started\");\r\n    \r\n//     // Retrieve the token from Redux state\r\n//     const { token } = getState().user; \r\n//     if (!token) {\r\n//       console.error(\"No token found\");\r\n//       return;\r\n//     }\r\n    \r\n//     console.log(\"Token retrieved:\", token);\r\n\r\n//     // Authorization headers\r\n//     const config = {\r\n//       headers: {\r\n//         'Content-Type': 'application/json',\r\n//         'Authorization': `Bearer ${token}` \r\n//       }\r\n//     };\r\n\r\n//     console.log(\"Authorization headers set\");\r\n\r\n//     // Making API request\r\n//     const res = await axios.post('http://localhost:4000/cart/addtocart', {\r\n//       itemId: product._id\r\n//     }, config);\r\n    \r\n//     console.log(\"API response:\", res);\r\n\r\n//     // Dispatch success action\r\n//     dispatch({\r\n//       type: ADD_TO_CART,\r\n//       payload: res.data\r\n//     });\r\n\r\n//     console.log(\"Product added to cart\");\r\n\r\n//   } catch (error) {\r\n//     console.error(\"Error adding to cart:\", error.response?.data || error.message);\r\n\r\n//     dispatch({\r\n//       type: CART_ERROR,\r\n//       payload: error.response?.data || 'An error occurred'\r\n//     });\r\n//   }\r\n// };\r\n// Example of an action to add to the cart\\\r\n\r\n// cartActions.jsx\r\n\r\n\r\nexport const addToCart = (productId) => async (dispatch) => {\r\n  try {\r\n    const token = localStorage.getItem('token');\r\n    \r\n    if (!token) {\r\n      throw new Error('User not authenticated');\r\n    }\r\n\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${token}` // Attach the token\r\n      }\r\n    };\r\n\r\n    const response = await axios.post(`${API_URL}/cart/addtocart`, { productId }, config);\r\n\r\n    dispatch({\r\n      type: 'ADD_TO_CART_SUCCESS',\r\n      payload: response.data\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: 'ADD_TO_CART_FAIL',\r\n      payload: error.response ? error.response.data : error.message\r\n    });\r\n    console.error('Error adding to cart:', error.message);\r\n  }\r\n};\r\n\r\n\r\nexport const getCart = () => async (dispatch) => {\r\n  try {\r\n    const token = localStorage.getItem('token');\r\n    \r\n    if (!token) {\r\n      throw new Error('User not authenticated');\r\n    }\r\n\r\n    const config = {\r\n      headers: {\r\n        'Authorization': `Bearer ${token}` // Attach the token\r\n      }\r\n    };\r\n\r\n    const response = await axios.get('/api/cart', config);\r\n\r\n    dispatch({\r\n      type: 'GET_CART_SUCCESS',\r\n      payload: response.data\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: 'GET_CART_FAIL',\r\n      payload: error.response ? error.response.data : error.message\r\n    });\r\n    console.error('Error getting cart:', error.message);\r\n  }\r\n};\r\n\r\n\r\nexport const removeFromCart = (productId) => async (dispatch) => {\r\n  try {\r\n    const token = localStorage.getItem('token');\r\n    \r\n    if (!token) {\r\n      throw new Error('User not authenticated');\r\n    }\r\n\r\n    const config = {\r\n      headers: {\r\n        'Authorization': `Bearer ${token}` // Attach the token\r\n      }\r\n    };\r\n\r\n    const response = await axios.delete(`/api/cart/remove/${productId}`, config);\r\n\r\n    dispatch({\r\n      type: 'REMOVE_FROM_CART_SUCCESS',\r\n      payload: response.data\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: 'REMOVE_FROM_CART_FAIL',\r\n      payload: error.response ? error.response.data : error.message\r\n    });\r\n    console.error('Error removing from cart:', error.message);\r\n  }\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}