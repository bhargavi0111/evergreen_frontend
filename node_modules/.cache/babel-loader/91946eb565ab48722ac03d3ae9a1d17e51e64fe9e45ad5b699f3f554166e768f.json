{"ast":null,"code":"// import axios from \"axios\";\n\n// export const ADD_TO_CART = \"ADD_TO_CART\";\n// export const REMOVE_FROM_CART_SUCCESS = \"REMOVE_FROM_CART_SUCCESS\";\n// export const CART_ERROR = \"CART_ERROR\";\n// export const UPDATE_QUANTITY_SUCCESS = \"UPDATE_QUANTITY_SUCCESS\";\n\n// export const addToCart = (itemId) => async (dispatch) => {\n//   try {\n//     const token = localStorage.getItem(\"token\");\n\n//     if (!token) {\n//       throw new Error(\"User not authenticated\");\n//     }\n\n//     const config = {\n//       headers: {\n//         Authorization: `Bearer ${token}`,\n//         \"Content-Type\": \"application/json\",\n//       },\n//     };\n\n//     console.log(\"Sending itemId:\", itemId); // Log the itemId being sent\n\n//     if (!itemId || typeof itemId !== \"string\") {\n//       throw new Error(\"Invalid itemId\");\n//     }\n\n//     const response = await axios.post(\n//       \"http://localhost:4000/cart/addtocart\",\n//       { itemId }, // Only sending itemId as a string\n//       config\n//     );\n\n//     dispatch({\n//       type: \"ADD_TO_CART_SUCCESS\",\n//       payload: response.data,\n//     });\n//   } catch (error) {\n//     dispatch({\n//       type: \"ADD_TO_CART_FAIL\",\n//       payload: error.response ? error.response.data : error.message,\n//     });\n//     console.error(\n//       \"Error adding to cart:\",\n//       error.response ? error.response.data : error.message\n//     );\n//   }\n// };\n\n// export const GET_CART_SUCCESS = \"GET_CART_SUCCESS\";\n// export const GET_CART_FAIL = \"GET_CART_FAIL\";\n// export const GET_CART_REQUEST = \"GET_CART_REQUEST\";\n// export const getCart = () => async (dispatch) => {\n//   try {\n//     dispatch({ type: GET_CART_REQUEST });\n//     const token = localStorage.getItem(\"token\");\n\n//     const response = await axios.get(\"http://localhost:4000/cart/getcart\", {\n//       headers: { Authorization: `Bearer ${token}` },\n//     });\n\n//     dispatch({ type: GET_CART_SUCCESS, payload: response.data.cart });\n//   } catch (error) {\n//     console.error(\"Error fetching cart:\", error); // Log error\n//     dispatch({ type: GET_CART_FAIL, payload: error.message });\n//   }\n// };\n\n// export const removeFromCart = (itemId) => async (dispatch) => {\n//   const token = localStorage.getItem(\"token\");\n//   console.log(`Removing item with ID: ${itemId}`);\n//   try {\n//     const response = await axios.delete(\n//       `http://localhost:4000/cart/removefromcart`,\n//       {\n//         headers: { Authorization: `Bearer ${token}` },\n\n//         data: { itemId },\n//       }\n//     );\n//     console.log(\"Response from server:\", response);\n//     dispatch({\n//       type: \"REMOVE_FROM_CART_SUCCESS\",\n//       payload: response.data.cart.products,\n//     });\n//   } catch (error) {\n//     console.error(\"Error fetching cart:\", error);\n//     dispatch({ type: \"CART_ERROR\", payload: error.response.data.message });\n//   }\n// };\n\n// export const updateCartQuantity =\n//   (itemId, newQuantity) => async (dispatch, getState) => {\n//     const token = localStorage.getItem(\"token\");\n//     try {\n//       const response = await axios.patch(\n//         \"http://localhost:4000/cart/updatequantity\",\n//         { itemId, newQuantity },\n//         {\n//           headers: {\n//             Authorization: `Bearer ${token}`,\n//           },\n//         }\n//       );\n//       dispatch({\n//         type: \"UPDATE_CART_SUCCESS\",\n//         payload: response.data.cart.products,\n//       });\n//     } catch (error) {\n//       console.error(\"Error updating cart:\", error);\n//       dispatch({ type: \"CART_ERROR\", payload: error.response.data.message });\n//     }\n//   };\n\nimport axios from \"axios\";\nexport const ADD_TO_CART_SUCCESS = \"ADD_TO_CART_SUCCESS\";\nexport const ADD_TO_CART_FAIL = \"ADD_TO_CART_FAIL\";\nexport const REMOVE_FROM_CART_SUCCESS = \"REMOVE_FROM_CART_SUCCESS\";\nexport const REMOVE_FROM_CART_FAIL = \"REMOVE_FROM_CART_FAIL\";\nexport const GET_CART_SUCCESS = \"GET_CART_SUCCESS\";\nexport const GET_CART_FAIL = \"GET_CART_FAIL\";\nexport const GET_CART_REQUEST = \"GET_CART_REQUEST\";\nexport const UPDATE_CART_SUCCESS = \"UPDATE_CART_SUCCESS\";\nexport const UPDATE_CART_FAIL = \"UPDATE_CART_FAIL\";\nexport const CART_ERROR = \"CART_ERROR\";\nconst API_URL = \"http://localhost:4000/cart\";\n\n// Helper function to get token from localStorage\nconst getToken = () => localStorage.getItem(\"token\");\n\n// Helper function to handle errors\nconst handleError = error => {\n  console.error(\"API Error:\", error);\n  return error.response ? error.response.data : error.message;\n};\n\n// export const addToCart = (itemId) => async (dispatch) => {\n//   try {\n//     const token = getToken();\n//     if (!token) throw new Error(\"User not authenticated\");\n\n//     const config = {\n//       headers: {\n//         Authorization: `Bearer ${token}`,\n//         \"Content-Type\": \"application/json\",\n//       },\n//     };\n\n//     if (!itemId || typeof itemId !== \"string\") throw new Error(\"Invalid itemId\");\n\n//     const response = await axios.post(\n//       `${API_URL}/addtocart`,\n//       { itemId },\n//       config\n//     );\n\n//     dispatch({\n//       type: ADD_TO_CART_SUCCESS,\n//       payload: response.data,\n//     });\n//   } catch (error) {\n//     dispatch({\n//       type: ADD_TO_CART_FAIL,\n//       payload: handleError(error),\n//     });\n//   }\n// };\n\n// export const getCart = () => async (dispatch) => {\n//   try {\n//     dispatch({ type: GET_CART_REQUEST });\n\n//     const token = getToken();\n//     if (!token) throw new Error(\"User not authenticated\");\n\n//     const response = await axios.get(`${API_URL}/getcart`, {\n//       headers: { Authorization: `Bearer ${token}` },\n//     });\n\n//     dispatch({\n//       type: GET_CART_SUCCESS,\n//       payload: response.data.cart,\n//     });\n//   } catch (error) {\n//     dispatch({\n//       type: GET_CART_FAIL,\n//       payload: handleError(error),\n//     });\n//   }\n// };\n\n// export const removeFromCart = (itemId) => async (dispatch) => {\n//   try {\n//     const token = getToken();\n//     if (!token) throw new Error(\"User not authenticated\");\n\n//     const response = await axios.delete(\n//       `${API_URL}/removefromcart`,\n//       {\n//         headers: { Authorization: `Bearer ${token}` },\n//         data: { itemId },\n//       }\n//     );\n\n//     dispatch({\n//       type: REMOVE_FROM_CART_SUCCESS,\n//       payload: response.data.cart.products,\n//     });\n//   } catch (error) {\n//     dispatch({\n//       type: REMOVE_FROM_CART_FAIL,\n//       payload: handleError(error),\n//     });\n//   }\n// };\n\n// export const updateCartQuantity = (itemId, newQuantity) => async (dispatch) => {\n//   try {\n//     const token = getToken();\n//     if (!token) throw new Error(\"User not authenticated\");\n\n//     const response = await axios.patch(\n//       `${API_URL}/updatequantity`,\n//       { itemId, newQuantity },\n//       {\n//         headers: { Authorization: `Bearer ${token}` },\n//       }\n//     );\n\n//     dispatch({\n//       type: UPDATE_CART_SUCCESS,\n//       payload: response.data.cart.products,\n//     });\n//   } catch (error) {\n//     dispatch({\n//       type: UPDATE_CART_FAIL,\n//       payload: handleError(error),\n//     });\n//   }\n// };","map":{"version":3,"names":["axios","ADD_TO_CART_SUCCESS","ADD_TO_CART_FAIL","REMOVE_FROM_CART_SUCCESS","REMOVE_FROM_CART_FAIL","GET_CART_SUCCESS","GET_CART_FAIL","GET_CART_REQUEST","UPDATE_CART_SUCCESS","UPDATE_CART_FAIL","CART_ERROR","API_URL","getToken","localStorage","getItem","handleError","error","console","response","data","message"],"sources":["C:/Users/bhargavi_g/Documents/Nursery_live/frontend/src/redux/actions/cartActions.jsx"],"sourcesContent":["// import axios from \"axios\";\r\n\r\n// export const ADD_TO_CART = \"ADD_TO_CART\";\r\n// export const REMOVE_FROM_CART_SUCCESS = \"REMOVE_FROM_CART_SUCCESS\";\r\n// export const CART_ERROR = \"CART_ERROR\";\r\n// export const UPDATE_QUANTITY_SUCCESS = \"UPDATE_QUANTITY_SUCCESS\";\r\n\r\n// export const addToCart = (itemId) => async (dispatch) => {\r\n//   try {\r\n//     const token = localStorage.getItem(\"token\");\r\n\r\n//     if (!token) {\r\n//       throw new Error(\"User not authenticated\");\r\n//     }\r\n\r\n//     const config = {\r\n//       headers: {\r\n//         Authorization: `Bearer ${token}`,\r\n//         \"Content-Type\": \"application/json\",\r\n//       },\r\n//     };\r\n\r\n//     console.log(\"Sending itemId:\", itemId); // Log the itemId being sent\r\n\r\n//     if (!itemId || typeof itemId !== \"string\") {\r\n//       throw new Error(\"Invalid itemId\");\r\n//     }\r\n\r\n//     const response = await axios.post(\r\n//       \"http://localhost:4000/cart/addtocart\",\r\n//       { itemId }, // Only sending itemId as a string\r\n//       config\r\n//     );\r\n\r\n//     dispatch({\r\n//       type: \"ADD_TO_CART_SUCCESS\",\r\n//       payload: response.data,\r\n//     });\r\n//   } catch (error) {\r\n//     dispatch({\r\n//       type: \"ADD_TO_CART_FAIL\",\r\n//       payload: error.response ? error.response.data : error.message,\r\n//     });\r\n//     console.error(\r\n//       \"Error adding to cart:\",\r\n//       error.response ? error.response.data : error.message\r\n//     );\r\n//   }\r\n// };\r\n\r\n// export const GET_CART_SUCCESS = \"GET_CART_SUCCESS\";\r\n// export const GET_CART_FAIL = \"GET_CART_FAIL\";\r\n// export const GET_CART_REQUEST = \"GET_CART_REQUEST\";\r\n// export const getCart = () => async (dispatch) => {\r\n//   try {\r\n//     dispatch({ type: GET_CART_REQUEST });\r\n//     const token = localStorage.getItem(\"token\");\r\n\r\n//     const response = await axios.get(\"http://localhost:4000/cart/getcart\", {\r\n//       headers: { Authorization: `Bearer ${token}` },\r\n//     });\r\n\r\n//     dispatch({ type: GET_CART_SUCCESS, payload: response.data.cart });\r\n//   } catch (error) {\r\n//     console.error(\"Error fetching cart:\", error); // Log error\r\n//     dispatch({ type: GET_CART_FAIL, payload: error.message });\r\n//   }\r\n// };\r\n\r\n// export const removeFromCart = (itemId) => async (dispatch) => {\r\n//   const token = localStorage.getItem(\"token\");\r\n//   console.log(`Removing item with ID: ${itemId}`);\r\n//   try {\r\n//     const response = await axios.delete(\r\n//       `http://localhost:4000/cart/removefromcart`,\r\n//       {\r\n//         headers: { Authorization: `Bearer ${token}` },\r\n\r\n//         data: { itemId },\r\n//       }\r\n//     );\r\n//     console.log(\"Response from server:\", response);\r\n//     dispatch({\r\n//       type: \"REMOVE_FROM_CART_SUCCESS\",\r\n//       payload: response.data.cart.products,\r\n//     });\r\n//   } catch (error) {\r\n//     console.error(\"Error fetching cart:\", error);\r\n//     dispatch({ type: \"CART_ERROR\", payload: error.response.data.message });\r\n//   }\r\n// };\r\n\r\n// export const updateCartQuantity =\r\n//   (itemId, newQuantity) => async (dispatch, getState) => {\r\n//     const token = localStorage.getItem(\"token\");\r\n//     try {\r\n//       const response = await axios.patch(\r\n//         \"http://localhost:4000/cart/updatequantity\",\r\n//         { itemId, newQuantity },\r\n//         {\r\n//           headers: {\r\n//             Authorization: `Bearer ${token}`,\r\n//           },\r\n//         }\r\n//       );\r\n//       dispatch({\r\n//         type: \"UPDATE_CART_SUCCESS\",\r\n//         payload: response.data.cart.products,\r\n//       });\r\n//     } catch (error) {\r\n//       console.error(\"Error updating cart:\", error);\r\n//       dispatch({ type: \"CART_ERROR\", payload: error.response.data.message });\r\n//     }\r\n//   };\r\n\r\n\r\nimport axios from \"axios\";\r\n\r\nexport const ADD_TO_CART_SUCCESS = \"ADD_TO_CART_SUCCESS\";\r\nexport const ADD_TO_CART_FAIL = \"ADD_TO_CART_FAIL\";\r\nexport const REMOVE_FROM_CART_SUCCESS = \"REMOVE_FROM_CART_SUCCESS\";\r\nexport const REMOVE_FROM_CART_FAIL = \"REMOVE_FROM_CART_FAIL\";\r\nexport const GET_CART_SUCCESS = \"GET_CART_SUCCESS\";\r\nexport const GET_CART_FAIL = \"GET_CART_FAIL\";\r\nexport const GET_CART_REQUEST = \"GET_CART_REQUEST\";\r\nexport const UPDATE_CART_SUCCESS = \"UPDATE_CART_SUCCESS\";\r\nexport const UPDATE_CART_FAIL = \"UPDATE_CART_FAIL\";\r\nexport const CART_ERROR = \"CART_ERROR\";\r\n\r\nconst API_URL = \"http://localhost:4000/cart\";\r\n\r\n// Helper function to get token from localStorage\r\nconst getToken = () => localStorage.getItem(\"token\");\r\n\r\n// Helper function to handle errors\r\nconst handleError = (error) => {\r\n  console.error(\"API Error:\", error);\r\n  return error.response ? error.response.data : error.message;\r\n};\r\n\r\n// export const addToCart = (itemId) => async (dispatch) => {\r\n//   try {\r\n//     const token = getToken();\r\n//     if (!token) throw new Error(\"User not authenticated\");\r\n\r\n//     const config = {\r\n//       headers: {\r\n//         Authorization: `Bearer ${token}`,\r\n//         \"Content-Type\": \"application/json\",\r\n//       },\r\n//     };\r\n\r\n//     if (!itemId || typeof itemId !== \"string\") throw new Error(\"Invalid itemId\");\r\n\r\n//     const response = await axios.post(\r\n//       `${API_URL}/addtocart`,\r\n//       { itemId },\r\n//       config\r\n//     );\r\n\r\n//     dispatch({\r\n//       type: ADD_TO_CART_SUCCESS,\r\n//       payload: response.data,\r\n//     });\r\n//   } catch (error) {\r\n//     dispatch({\r\n//       type: ADD_TO_CART_FAIL,\r\n//       payload: handleError(error),\r\n//     });\r\n//   }\r\n// };\r\n\r\n// export const getCart = () => async (dispatch) => {\r\n//   try {\r\n//     dispatch({ type: GET_CART_REQUEST });\r\n\r\n//     const token = getToken();\r\n//     if (!token) throw new Error(\"User not authenticated\");\r\n\r\n//     const response = await axios.get(`${API_URL}/getcart`, {\r\n//       headers: { Authorization: `Bearer ${token}` },\r\n//     });\r\n\r\n//     dispatch({\r\n//       type: GET_CART_SUCCESS,\r\n//       payload: response.data.cart,\r\n//     });\r\n//   } catch (error) {\r\n//     dispatch({\r\n//       type: GET_CART_FAIL,\r\n//       payload: handleError(error),\r\n//     });\r\n//   }\r\n// };\r\n\r\n// export const removeFromCart = (itemId) => async (dispatch) => {\r\n//   try {\r\n//     const token = getToken();\r\n//     if (!token) throw new Error(\"User not authenticated\");\r\n\r\n//     const response = await axios.delete(\r\n//       `${API_URL}/removefromcart`,\r\n//       {\r\n//         headers: { Authorization: `Bearer ${token}` },\r\n//         data: { itemId },\r\n//       }\r\n//     );\r\n\r\n//     dispatch({\r\n//       type: REMOVE_FROM_CART_SUCCESS,\r\n//       payload: response.data.cart.products,\r\n//     });\r\n//   } catch (error) {\r\n//     dispatch({\r\n//       type: REMOVE_FROM_CART_FAIL,\r\n//       payload: handleError(error),\r\n//     });\r\n//   }\r\n// };\r\n\r\n// export const updateCartQuantity = (itemId, newQuantity) => async (dispatch) => {\r\n//   try {\r\n//     const token = getToken();\r\n//     if (!token) throw new Error(\"User not authenticated\");\r\n\r\n//     const response = await axios.patch(\r\n//       `${API_URL}/updatequantity`,\r\n//       { itemId, newQuantity },\r\n//       {\r\n//         headers: { Authorization: `Bearer ${token}` },\r\n//       }\r\n//     );\r\n\r\n//     dispatch({\r\n//       type: UPDATE_CART_SUCCESS,\r\n//       payload: response.data.cart.products,\r\n//     });\r\n//   } catch (error) {\r\n//     dispatch({\r\n//       type: UPDATE_CART_FAIL,\r\n//       payload: handleError(error),\r\n//     });\r\n//   }\r\n// };\r\n\r\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,OAAOA,KAAK,MAAM,OAAO;AAEzB,OAAO,MAAMC,mBAAmB,GAAG,qBAAqB;AACxD,OAAO,MAAMC,gBAAgB,GAAG,kBAAkB;AAClD,OAAO,MAAMC,wBAAwB,GAAG,0BAA0B;AAClE,OAAO,MAAMC,qBAAqB,GAAG,uBAAuB;AAC5D,OAAO,MAAMC,gBAAgB,GAAG,kBAAkB;AAClD,OAAO,MAAMC,aAAa,GAAG,eAAe;AAC5C,OAAO,MAAMC,gBAAgB,GAAG,kBAAkB;AAClD,OAAO,MAAMC,mBAAmB,GAAG,qBAAqB;AACxD,OAAO,MAAMC,gBAAgB,GAAG,kBAAkB;AAClD,OAAO,MAAMC,UAAU,GAAG,YAAY;AAEtC,MAAMC,OAAO,GAAG,4BAA4B;;AAE5C;AACA,MAAMC,QAAQ,GAAGA,CAAA,KAAMC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;;AAEpD;AACA,MAAMC,WAAW,GAAIC,KAAK,IAAK;EAC7BC,OAAO,CAACD,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;EAClC,OAAOA,KAAK,CAACE,QAAQ,GAAGF,KAAK,CAACE,QAAQ,CAACC,IAAI,GAAGH,KAAK,CAACI,OAAO;AAC7D,CAAC;;AAED;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}