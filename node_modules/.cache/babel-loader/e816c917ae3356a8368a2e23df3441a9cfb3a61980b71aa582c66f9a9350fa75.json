{"ast":null,"code":"// // src/redux/types/cartTypes.js\n\n// // src/redux/actions/cartActions.js\n// import axios from 'axios';\n// export const FETCH_CART_ITEMS = 'FETCH_CART_ITEMS';\n// export const ADD_TO_CART = 'ADD_TO_CART';\n// export const REMOVE_FROM_CART = 'REMOVE_FROM_CART';\n// export const UPDATE_CART_QUANTITY = 'UPDATE_CART_QUANTITY';\n\n// export const fetchCartItems = (userId) => async (dispatch) => {\n//   try {\n//     const response = await axios.get(`/cart/addtocart/${userId}`);\n//     dispatch({\n//       type: FETCH_CART_ITEMS,\n//       payload: response.data,\n//     });\n//   } catch (error) {\n//     console.error('Error fetching cart items:', error);\n//   }\n// };\n\n// export const addToCart = (product) => async (dispatch, getState) => {\n//   try {\n//     const { user } = getState().auth; // Assuming you have an auth reducer with user info\n//     if (!user) {\n//       throw new Error('User not authenticated');\n//     }\n\n//     const response = await axios.post('/api/addtocart', {\n//       userId: user._id,\n//       productId: product._id,\n//       quantity: 1, // You can modify this if you want to allow adding multiple quantities\n//     });\n\n//     dispatch({\n//       type: ADD_TO_CART,\n//       payload: {\n//         ...product,\n//         quantity: 1,\n//       },\n//     });\n\n//     // Optionally, you can fetch the updated cart after adding an item\n//     dispatch(fetchCartItems(user._id));\n//   } catch (error) {\n//     console.error('Error adding to cart:', error);\n//     // Handle error (e.g., show an error message to the user)\n//   }\n// };\n// src/redux/cartActions.js\n\n// Add to Cart\n\nimport axios from 'axios';\n\n// Action Types\n// export const GET_CART = 'GET_CART';\nexport const ADD_TO_CART = 'ADD_TO_CART';\nexport const REMOVE_FROM_CART_SUCCESS = 'REMOVE_FROM_CART_SUCCESS';\nexport const CART_ERROR = 'CART_ERROR';\nexport const UPDATE_QUANTITY_SUCCESS = 'UPDATE_QUANTITY_SUCCESS';\nconst API_URL = 'http://localhost:4000/cart';\n\n// Ensure that you're accessing the correct part of the state\n\n// Action Creators\n\n// // Add product to cart\n// export const addToCart = (product) => async (dispatch, getState) => {\n//   try {\n//     console.log(\"add to cart started\");\n\n//     // Retrieve the token from Redux state\n//     const { token } = getState().user; \n//     if (!token) {\n//       console.error(\"No token found\");\n//       return;\n//     }\n\n//     console.log(\"Token retrieved:\", token);\n\n//     // Authorization headers\n//     const config = {\n//       headers: {\n//         'Content-Type': 'application/json',\n//         'Authorization': `Bearer ${token}` \n//       }\n//     };\n\n//     console.log(\"Authorization headers set\");\n\n//     // Making API request\n//     const res = await axios.post('http://localhost:4000/cart/addtocart', {\n//       itemId: product._id\n//     }, config);\n\n//     console.log(\"API response:\", res);\n\n//     // Dispatch success action\n//     dispatch({\n//       type: ADD_TO_CART,\n//       payload: res.data\n//     });\n\n//     console.log(\"Product added to cart\");\n\n//   } catch (error) {\n//     console.error(\"Error adding to cart:\", error.response?.data || error.message);\n\n//     dispatch({\n//       type: CART_ERROR,\n//       payload: error.response?.data || 'An error occurred'\n//     });\n//   }\n// };\n// Example of an action to add to the cart\\\n\n// cartActions.jsx\n\n// export const addToCart = (productId) => async (dispatch) => {\n//   try {\n//     const token = localStorage.getItem('token');\n\n//     if (!token) {\n//       throw new Error('User not authenticated');\n//     }\n\n//     const config = {\n//       headers: {\n//         'Content-Type': 'application/json',\n//         'Authorization': `Bearer ${token}` // Attach the token\n//       }\n//     };\n\n//     const response = await axios.post('http://localhost:4000/cart/addtocart', { productId }, config);\n\n//     dispatch({\n//       type: 'ADD_TO_CART_SUCCESS',\n//       payload: response.data\n//     });\n//   } catch (error) {\n//     dispatch({\n//       type: 'ADD_TO_CART_FAIL',\n//       payload: error.response ? error.response.data : error.message\n//     });\n//     console.error('Error adding to cart:', error.message);\n//   }\n// };\n\n// export const getCart = () => async (dispatch) => {\n//   try {\n//     const token = localStorage.getItem('token');\n\n//     if (!token) {\n//       throw new Error('User not authenticated');\n//     }\n\n//     const config = {\n//       headers: {\n//         'Authorization': `Bearer ${token}` // Attach the token\n//       }\n//     };\n\n//     const response = await axios.get('http://localhost:4000/cart/getcart', config);\n\n//     dispatch({\n//       type: 'GET_CART_SUCCESS',\n//       payload: response.data\n//     });\n//   } catch (error) {\n//     dispatch({\n//       type: 'GET_CART_FAIL',\n//       payload: error.response ? error.response.data : error.message\n//     });\n//     console.error('Error getting cart:', error.message);\n//   }\n// };\n\n// export const removeFromCart = (productId) => async (dispatch) => {\n//   try {\n//     const token = localStorage.getItem('token');\n\n//     if (!token) {\n//       throw new Error('User not authenticated');\n//     }\n\n//     const config = {\n//       headers: {\n//         'Authorization': `Bearer ${token}` // Attach the token\n//       }\n//     };\n\n//     const response = await axios.delete(`http://localhost:4000/cart/removefromcart`, config);\n\n//     dispatch({\n//       type: 'REMOVE_FROM_CART_SUCCESS',\n//       payload: response.data\n//     });\n//   } catch (error) {\n//     dispatch({\n//       type: 'REMOVE_FROM_CART_FAIL',\n//       payload: error.response ? error.response.data : error.message\n//     });\n//     console.error('Error removing from cart:', error.message);\n//   }\n// };\n\n// Function to add an item to the cart\n// export const addToCart = (itemId) => async (dispatch) => {\n//   try {\n//     const token = localStorage.getItem('token');\n\n//     if (!token) {\n//       throw new Error('User not authenticated');\n//     }\n\n//     const config = {\n//       headers: {\n//         'Authorization': `Bearer ${token}`,\n//         'Content-Type': 'application/json'\n//       }\n//     };\n\n//     const response = await axios.post(\n//       'http://localhost:4000/cart/addtocart',\n//       { itemId },\n//       config\n//     );\n\n//     dispatch({\n//       type: 'ADD_TO_CART_SUCCESS',\n//       payload: response.data\n//     });\n//   } catch (error) {\n//     dispatch({\n//       type: 'ADD_TO_CART_FAIL',\n//       payload: error.response ? error.response.data : error.message\n//     });\n//     console.error('Error adding to cart:', error.response ? error.response.data : error.message);\n//   }\n// };\nexport const addToCart = itemId => async dispatch => {\n  try {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      throw new Error('User not authenticated');\n    }\n    const config = {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    };\n    console.log('Sending itemId:', itemId); // Log the itemId being sent\n\n    if (!itemId || typeof itemId !== 'string') {\n      throw new Error('Invalid itemId');\n    }\n    const response = await axios.post('http://localhost:4000/cart/addtocart', {\n      itemId\n    },\n    // Only sending itemId as a string\n    config);\n    dispatch({\n      type: 'ADD_TO_CART_SUCCESS',\n      payload: response.data\n    });\n  } catch (error) {\n    dispatch({\n      type: 'ADD_TO_CART_FAIL',\n      payload: error.response ? error.response.data : error.message\n    });\n    console.error('Error adding to cart:', error.response ? error.response.data : error.message);\n  }\n};\n\n// Function to get the cart\n// export const getCart = () => async (dispatch) => {\n//   try {\n//     const token = localStorage.getItem('token');\n\n//     if (!token) {\n//       throw new Error('User not authenticated');\n//     }\n\n//     const config = {\n//       headers: {\n//         'Authorization': `Bearer ${token}`,\n//         'Content-Type': 'application/json'\n//       }\n//     };\n\n//     const response = await axios.get(\n//       'http://localhost:4000/cart/getcart',\n//       config\n//     );\n\n//     dispatch({\n//       type: 'GET_CART_SUCCESS',\n//       payload: response.data\n//     });\n//   } catch (error) {\n//     dispatch({\n//       type: 'GET_CART_FAIL',\n//       payload: error.response ? error.response.data : error.message\n//     });\n//     console.error('Error getting cart:', error.response ? error.response.data : error.message);\n//   }\n// };\n\n// cartActions.js\nexport const GET_CART_SUCCESS = 'GET_CART_SUCCESS';\nexport const GET_CART_FAIL = 'GET_CART_FAIL';\nexport const GET_CART_REQUEST = 'GET_CART_REQUEST';\nexport const getCart = () => async dispatch => {\n  try {\n    dispatch({\n      type: GET_CART_REQUEST\n    });\n    const token = localStorage.getItem('token');\n    const response = await axios.get('http://localhost:4000/cart/getcart', {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    dispatch({\n      type: GET_CART_SUCCESS,\n      payload: response.data.cart\n    });\n  } catch (error) {\n    console.error('Error fetching cart:', error); // Log error\n    dispatch({\n      type: GET_CART_FAIL,\n      payload: error.message\n    });\n  }\n};\n\n// export const getCart = () => async (dispatch) => {\n//   dispatch({ type: 'FETCH_CART_START' });\n//   try {\n//     const token = localStorage.getItem('token');\n//     console.log('Sending request with token:', token);\n\n//     const response = await fetch('http://localhost:4000/cart/getcart', {\n//       method: 'GET',\n//       headers: {\n//         'Authorization': `Bearer ${token}`,\n//         'Content-Type': 'application/json'\n//       },\n//       credentials: 'include' // Add this line if you're using cookies\n//     });\n\n//     if (!response.ok) {\n//       throw new Error(`HTTP error! status: ${response.status}`);\n//     }\n\n//     const data = await response.json();\n//     console.log('Received cart data:', data);\n//     dispatch({ type: 'FETCH_CART_SUCCESS', payload: data.cart });\n//   } catch (error) {\n//     console.error('Error fetching cart:', error);\n//     dispatch({ type: 'FETCH_CART_FAILURE', payload: error.message });\n//   }\n// };\n\n// Function to remove an item from the cart\n// export const removeFromCart = (itemId) => async (dispatch) => {\n//   try {\n//     const token = localStorage.getItem('token');\n\n//     if (!token) {\n//       throw new Error('User not authenticated');\n//     }\n\n//     const config = {\n//       headers: {\n//         'Authorization': `Bearer ${token}`,\n//         'Content-Type': 'application/json'\n//       }\n//     };\n\n//     const response = await axios.delete(\n//       'http://localhost:4000/cart/removefromcart',\n//       {\n//         headers: {\n//           'Authorization': `Bearer ${token}`,\n//           'Content-Type': 'application/json'\n//         },\n//         data: { itemId } // Note that for DELETE requests, body data should be sent in `data` field\n//       }\n//     );\n\n//     dispatch({\n//       type: 'REMOVE_FROM_CART_SUCCESS',\n//       payload: response.data\n//     });\n//   } catch (error) {\n//     dispatch({\n//       type: 'REMOVE_FROM_CART_FAIL',\n//       payload: error.response ? error.response.data : error.message\n//     });\n//     console.error('Error removing from cart:', error.response ? error.response.data : error.message);\n//   }\n// };\n\n// Remove From Cart\n// frontend/src/redux/actions/cartActions.js\nexport const removeFromCart = itemId => async dispatch => {\n  console.log(`Removing item with ID: ${itemId}`);\n  try {\n    const response = await axios.delete(`/removefromcart`, {\n      data: {\n        itemId\n      }\n    });\n    console.log(\"Response from server:\", response);\n    dispatch({\n      type: 'REMOVE_FROM_CART_SUCCESS',\n      payload: response.data.cart.products\n    });\n  } catch (error) {\n    console.error(\"Error fetching cart:\", error);\n    dispatch({\n      type: 'CART_ERROR',\n      payload: error.response.data.message\n    });\n  }\n};\nexport const updateQuantity = (productId, quantity) => async dispatch => {\n  try {\n    const response = await axios.put(`http://localhost:4000/cart/${productId}`, {\n      quantity\n    });\n    dispatch({\n      type: 'UPDATE_QUANTITY_SUCCESS',\n      payload: response.data\n    });\n  } catch (error) {\n    dispatch({\n      type: 'CART_ERROR',\n      payload: error.message\n    });\n  }\n};","map":{"version":3,"names":["axios","ADD_TO_CART","REMOVE_FROM_CART_SUCCESS","CART_ERROR","UPDATE_QUANTITY_SUCCESS","API_URL","addToCart","itemId","dispatch","token","localStorage","getItem","Error","config","headers","console","log","response","post","type","payload","data","error","message","GET_CART_SUCCESS","GET_CART_FAIL","GET_CART_REQUEST","getCart","get","Authorization","cart","removeFromCart","delete","products","updateQuantity","productId","quantity","put"],"sources":["C:/Users/bhargavi_g/Documents/Nursery_live/frontend/src/redux/actions/cartActions.jsx"],"sourcesContent":["// // src/redux/types/cartTypes.js\r\n\r\n// // src/redux/actions/cartActions.js\r\n// import axios from 'axios';\r\n// export const FETCH_CART_ITEMS = 'FETCH_CART_ITEMS';\r\n// export const ADD_TO_CART = 'ADD_TO_CART';\r\n// export const REMOVE_FROM_CART = 'REMOVE_FROM_CART';\r\n// export const UPDATE_CART_QUANTITY = 'UPDATE_CART_QUANTITY';\r\n\r\n\r\n\r\n// export const fetchCartItems = (userId) => async (dispatch) => {\r\n//   try {\r\n//     const response = await axios.get(`/cart/addtocart/${userId}`);\r\n//     dispatch({\r\n//       type: FETCH_CART_ITEMS,\r\n//       payload: response.data,\r\n//     });\r\n//   } catch (error) {\r\n//     console.error('Error fetching cart items:', error);\r\n//   }\r\n// };\r\n\r\n// export const addToCart = (product) => async (dispatch, getState) => {\r\n//   try {\r\n//     const { user } = getState().auth; // Assuming you have an auth reducer with user info\r\n//     if (!user) {\r\n//       throw new Error('User not authenticated');\r\n//     }\r\n\r\n//     const response = await axios.post('/api/addtocart', {\r\n//       userId: user._id,\r\n//       productId: product._id,\r\n//       quantity: 1, // You can modify this if you want to allow adding multiple quantities\r\n//     });\r\n\r\n//     dispatch({\r\n//       type: ADD_TO_CART,\r\n//       payload: {\r\n//         ...product,\r\n//         quantity: 1,\r\n//       },\r\n//     });\r\n\r\n//     // Optionally, you can fetch the updated cart after adding an item\r\n//     dispatch(fetchCartItems(user._id));\r\n//   } catch (error) {\r\n//     console.error('Error adding to cart:', error);\r\n//     // Handle error (e.g., show an error message to the user)\r\n//   }\r\n// };\r\n// src/redux/cartActions.js\r\n\r\n// Add to Cart\r\n\r\n\r\nimport axios from 'axios';\r\n\r\n// Action Types\r\n// export const GET_CART = 'GET_CART';\r\nexport const ADD_TO_CART = 'ADD_TO_CART';\r\nexport const REMOVE_FROM_CART_SUCCESS = 'REMOVE_FROM_CART_SUCCESS';\r\nexport const CART_ERROR = 'CART_ERROR';\r\nexport const UPDATE_QUANTITY_SUCCESS='UPDATE_QUANTITY_SUCCESS'\r\nconst API_URL = 'http://localhost:4000/cart';\r\n\r\n// Ensure that you're accessing the correct part of the state\r\n\r\n\r\n// Action Creators\r\n\r\n// // Add product to cart\r\n// export const addToCart = (product) => async (dispatch, getState) => {\r\n//   try {\r\n//     console.log(\"add to cart started\");\r\n    \r\n//     // Retrieve the token from Redux state\r\n//     const { token } = getState().user; \r\n//     if (!token) {\r\n//       console.error(\"No token found\");\r\n//       return;\r\n//     }\r\n    \r\n//     console.log(\"Token retrieved:\", token);\r\n\r\n//     // Authorization headers\r\n//     const config = {\r\n//       headers: {\r\n//         'Content-Type': 'application/json',\r\n//         'Authorization': `Bearer ${token}` \r\n//       }\r\n//     };\r\n\r\n//     console.log(\"Authorization headers set\");\r\n\r\n//     // Making API request\r\n//     const res = await axios.post('http://localhost:4000/cart/addtocart', {\r\n//       itemId: product._id\r\n//     }, config);\r\n    \r\n//     console.log(\"API response:\", res);\r\n\r\n//     // Dispatch success action\r\n//     dispatch({\r\n//       type: ADD_TO_CART,\r\n//       payload: res.data\r\n//     });\r\n\r\n//     console.log(\"Product added to cart\");\r\n\r\n//   } catch (error) {\r\n//     console.error(\"Error adding to cart:\", error.response?.data || error.message);\r\n\r\n//     dispatch({\r\n//       type: CART_ERROR,\r\n//       payload: error.response?.data || 'An error occurred'\r\n//     });\r\n//   }\r\n// };\r\n// Example of an action to add to the cart\\\r\n\r\n// cartActions.jsx\r\n\r\n\r\n// export const addToCart = (productId) => async (dispatch) => {\r\n//   try {\r\n//     const token = localStorage.getItem('token');\r\n    \r\n//     if (!token) {\r\n//       throw new Error('User not authenticated');\r\n//     }\r\n\r\n//     const config = {\r\n//       headers: {\r\n//         'Content-Type': 'application/json',\r\n//         'Authorization': `Bearer ${token}` // Attach the token\r\n//       }\r\n//     };\r\n\r\n//     const response = await axios.post('http://localhost:4000/cart/addtocart', { productId }, config);\r\n\r\n//     dispatch({\r\n//       type: 'ADD_TO_CART_SUCCESS',\r\n//       payload: response.data\r\n//     });\r\n//   } catch (error) {\r\n//     dispatch({\r\n//       type: 'ADD_TO_CART_FAIL',\r\n//       payload: error.response ? error.response.data : error.message\r\n//     });\r\n//     console.error('Error adding to cart:', error.message);\r\n//   }\r\n// };\r\n\r\n\r\n// export const getCart = () => async (dispatch) => {\r\n//   try {\r\n//     const token = localStorage.getItem('token');\r\n    \r\n//     if (!token) {\r\n//       throw new Error('User not authenticated');\r\n//     }\r\n\r\n//     const config = {\r\n//       headers: {\r\n//         'Authorization': `Bearer ${token}` // Attach the token\r\n//       }\r\n//     };\r\n\r\n//     const response = await axios.get('http://localhost:4000/cart/getcart', config);\r\n\r\n//     dispatch({\r\n//       type: 'GET_CART_SUCCESS',\r\n//       payload: response.data\r\n//     });\r\n//   } catch (error) {\r\n//     dispatch({\r\n//       type: 'GET_CART_FAIL',\r\n//       payload: error.response ? error.response.data : error.message\r\n//     });\r\n//     console.error('Error getting cart:', error.message);\r\n//   }\r\n// };\r\n\r\n\r\n// export const removeFromCart = (productId) => async (dispatch) => {\r\n//   try {\r\n//     const token = localStorage.getItem('token');\r\n    \r\n//     if (!token) {\r\n//       throw new Error('User not authenticated');\r\n//     }\r\n\r\n//     const config = {\r\n//       headers: {\r\n//         'Authorization': `Bearer ${token}` // Attach the token\r\n//       }\r\n//     };\r\n\r\n//     const response = await axios.delete(`http://localhost:4000/cart/removefromcart`, config);\r\n\r\n//     dispatch({\r\n//       type: 'REMOVE_FROM_CART_SUCCESS',\r\n//       payload: response.data\r\n//     });\r\n//   } catch (error) {\r\n//     dispatch({\r\n//       type: 'REMOVE_FROM_CART_FAIL',\r\n//       payload: error.response ? error.response.data : error.message\r\n//     });\r\n//     console.error('Error removing from cart:', error.message);\r\n//   }\r\n// };\r\n\r\n// Function to add an item to the cart\r\n// export const addToCart = (itemId) => async (dispatch) => {\r\n//   try {\r\n//     const token = localStorage.getItem('token');\r\n    \r\n//     if (!token) {\r\n//       throw new Error('User not authenticated');\r\n//     }\r\n\r\n//     const config = {\r\n//       headers: {\r\n//         'Authorization': `Bearer ${token}`,\r\n//         'Content-Type': 'application/json'\r\n//       }\r\n//     };\r\n\r\n//     const response = await axios.post(\r\n//       'http://localhost:4000/cart/addtocart',\r\n//       { itemId },\r\n//       config\r\n//     );\r\n\r\n//     dispatch({\r\n//       type: 'ADD_TO_CART_SUCCESS',\r\n//       payload: response.data\r\n//     });\r\n//   } catch (error) {\r\n//     dispatch({\r\n//       type: 'ADD_TO_CART_FAIL',\r\n//       payload: error.response ? error.response.data : error.message\r\n//     });\r\n//     console.error('Error adding to cart:', error.response ? error.response.data : error.message);\r\n//   }\r\n// };\r\nexport const addToCart = (itemId) => async (dispatch) => {\r\n  try {\r\n    const token = localStorage.getItem('token');\r\n    \r\n    if (!token) {\r\n      throw new Error('User not authenticated');\r\n    }\r\n\r\n    const config = {\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`,\r\n        'Content-Type': 'application/json'\r\n      }\r\n    };\r\n\r\n    console.log('Sending itemId:', itemId); // Log the itemId being sent\r\n\r\n    if (!itemId || typeof itemId !== 'string') {\r\n      throw new Error('Invalid itemId');\r\n    }\r\n\r\n    const response = await axios.post(\r\n      'http://localhost:4000/cart/addtocart',\r\n      { itemId }, // Only sending itemId as a string\r\n      config\r\n    );\r\n\r\n    dispatch({\r\n      type: 'ADD_TO_CART_SUCCESS',\r\n      payload: response.data\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: 'ADD_TO_CART_FAIL',\r\n      payload: error.response ? error.response.data : error.message\r\n    });\r\n    console.error('Error adding to cart:', error.response ? error.response.data : error.message);\r\n  }\r\n};\r\n\r\n\r\n\r\n// Function to get the cart\r\n// export const getCart = () => async (dispatch) => {\r\n//   try {\r\n//     const token = localStorage.getItem('token');\r\n    \r\n//     if (!token) {\r\n//       throw new Error('User not authenticated');\r\n//     }\r\n\r\n//     const config = {\r\n//       headers: {\r\n//         'Authorization': `Bearer ${token}`,\r\n//         'Content-Type': 'application/json'\r\n//       }\r\n//     };\r\n\r\n//     const response = await axios.get(\r\n//       'http://localhost:4000/cart/getcart',\r\n//       config\r\n//     );\r\n\r\n//     dispatch({\r\n//       type: 'GET_CART_SUCCESS',\r\n//       payload: response.data\r\n//     });\r\n//   } catch (error) {\r\n//     dispatch({\r\n//       type: 'GET_CART_FAIL',\r\n//       payload: error.response ? error.response.data : error.message\r\n//     });\r\n//     console.error('Error getting cart:', error.response ? error.response.data : error.message);\r\n//   }\r\n// };\r\n\r\n// cartActions.js\r\nexport const  GET_CART_SUCCESS='GET_CART_SUCCESS'\r\nexport const GET_CART_FAIL='GET_CART_FAIL'\r\nexport const GET_CART_REQUEST ='GET_CART_REQUEST'\r\nexport const getCart = () => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: GET_CART_REQUEST });\r\n    const token = localStorage.getItem('token');\r\n    \r\n    const response = await axios.get('http://localhost:4000/cart/getcart', {\r\n      headers: { Authorization: `Bearer ${token}` }\r\n    });\r\n\r\n    dispatch({ type: GET_CART_SUCCESS, payload: response.data.cart });\r\n  } catch (error) {\r\n    console.error('Error fetching cart:', error); // Log error\r\n    dispatch({ type: GET_CART_FAIL, payload: error.message });\r\n  }\r\n};\r\n\r\n// export const getCart = () => async (dispatch) => {\r\n//   dispatch({ type: 'FETCH_CART_START' });\r\n//   try {\r\n//     const token = localStorage.getItem('token');\r\n//     console.log('Sending request with token:', token);\r\n    \r\n//     const response = await fetch('http://localhost:4000/cart/getcart', {\r\n//       method: 'GET',\r\n//       headers: {\r\n//         'Authorization': `Bearer ${token}`,\r\n//         'Content-Type': 'application/json'\r\n//       },\r\n//       credentials: 'include' // Add this line if you're using cookies\r\n//     });\r\n\r\n//     if (!response.ok) {\r\n//       throw new Error(`HTTP error! status: ${response.status}`);\r\n//     }\r\n\r\n//     const data = await response.json();\r\n//     console.log('Received cart data:', data);\r\n//     dispatch({ type: 'FETCH_CART_SUCCESS', payload: data.cart });\r\n//   } catch (error) {\r\n//     console.error('Error fetching cart:', error);\r\n//     dispatch({ type: 'FETCH_CART_FAILURE', payload: error.message });\r\n//   }\r\n// };\r\n\r\n// Function to remove an item from the cart\r\n// export const removeFromCart = (itemId) => async (dispatch) => {\r\n//   try {\r\n//     const token = localStorage.getItem('token');\r\n    \r\n//     if (!token) {\r\n//       throw new Error('User not authenticated');\r\n//     }\r\n\r\n//     const config = {\r\n//       headers: {\r\n//         'Authorization': `Bearer ${token}`,\r\n//         'Content-Type': 'application/json'\r\n//       }\r\n//     };\r\n\r\n//     const response = await axios.delete(\r\n//       'http://localhost:4000/cart/removefromcart',\r\n//       {\r\n//         headers: {\r\n//           'Authorization': `Bearer ${token}`,\r\n//           'Content-Type': 'application/json'\r\n//         },\r\n//         data: { itemId } // Note that for DELETE requests, body data should be sent in `data` field\r\n//       }\r\n//     );\r\n\r\n//     dispatch({\r\n//       type: 'REMOVE_FROM_CART_SUCCESS',\r\n//       payload: response.data\r\n//     });\r\n//   } catch (error) {\r\n//     dispatch({\r\n//       type: 'REMOVE_FROM_CART_FAIL',\r\n//       payload: error.response ? error.response.data : error.message\r\n//     });\r\n//     console.error('Error removing from cart:', error.response ? error.response.data : error.message);\r\n//   }\r\n// };\r\n\r\n\r\n\r\n// Remove From Cart\r\n// frontend/src/redux/actions/cartActions.js\r\nexport const removeFromCart = (itemId) => async dispatch => {\r\n  console.log(`Removing item with ID: ${itemId}`);\r\n  try {\r\n    const response = await axios.delete(`/removefromcart`, {\r\n      data: { itemId },\r\n    });\r\n    console.log(\"Response from server:\", response);\r\n    dispatch({ type: 'REMOVE_FROM_CART_SUCCESS', payload: response.data.cart.products });\r\n  } catch (error) {\r\n    console.error(\"Error fetching cart:\", error);\r\n    dispatch({ type: 'CART_ERROR', payload: error.response.data.message });\r\n  }\r\n};\r\n\r\n\r\nexport const updateQuantity = (productId, quantity) => async dispatch => {\r\n  try {\r\n    const response = await axios.put(`http://localhost:4000/cart/${productId}`, { quantity });\r\n    dispatch({ type: 'UPDATE_QUANTITY_SUCCESS', payload: response.data });\r\n  } catch (error) {\r\n    dispatch({ type: 'CART_ERROR', payload: error.message });\r\n  }\r\n};\r\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA;AACA,OAAO,MAAMC,WAAW,GAAG,aAAa;AACxC,OAAO,MAAMC,wBAAwB,GAAG,0BAA0B;AAClE,OAAO,MAAMC,UAAU,GAAG,YAAY;AACtC,OAAO,MAAMC,uBAAuB,GAAC,yBAAyB;AAC9D,MAAMC,OAAO,GAAG,4BAA4B;;AAE5C;;AAGA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,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"},"metadata":{},"sourceType":"module","externalDependencies":[]}