{"ast":null,"code":"import axios from \"axios\";\nexport const ADD_TO_CART = \"ADD_TO_CART\";\nexport const REMOVE_FROM_CART_SUCCESS = \"REMOVE_FROM_CART_SUCCESS\";\nexport const CART_ERROR = \"CART_ERROR\";\nexport const UPDATE_QUANTITY_SUCCESS = \"UPDATE_QUANTITY_SUCCESS\";\nexport const GET_CART_SUCCESS = \"GET_CART_SUCCESS\";\nexport const GET_CART_FAIL = \"GET_CART_FAIL\";\nexport const GET_CART_REQUEST = \"GET_CART_REQUEST\";\nexport const addToCart = itemId => async dispatch => {\n  try {\n    const token = localStorage.getItem(\"token\");\n    if (!token) {\n      throw new Error(\"User not authenticated\");\n    }\n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`,\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    if (!itemId || typeof itemId !== \"string\") {\n      throw new Error(\"Invalid itemId\");\n    }\n    const response = await axios.post(\"http://localhost:4000/cart/addtocart\", {\n      itemId\n    }, config);\n    dispatch({\n      type: \"ADD_TO_CART_SUCCESS\",\n      payload: response.data\n    });\n  } catch (error) {\n    dispatch({\n      type: \"ADD_TO_CART_FAIL\",\n      payload: error.response ? error.response.data : error.message\n    });\n    console.error(\"Error adding to cart:\", error.response ? error.response.data : error.message);\n  }\n};\nexport const getCart = () => async dispatch => {\n  try {\n    dispatch({\n      type: GET_CART_REQUEST\n    });\n    const token = localStorage.getItem(\"token\");\n    const response = await axios.get(\"http://localhost:4000/cart/getcart\", {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    dispatch({\n      type: GET_CART_SUCCESS,\n      payload: response.data.cart\n    });\n  } catch (error) {\n    console.error(\"Error fetching cart:\", error);\n    dispatch({\n      type: GET_CART_FAIL,\n      payload: error.message\n    });\n  }\n};\nexport const removeFromCart = itemId => async dispatch => {\n  const token = localStorage.getItem(\"token\");\n  try {\n    const response = await axios.delete(`http://localhost:4000/cart/removefromcart`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      },\n      data: {\n        itemId\n      }\n    });\n    dispatch({\n      type: \"REMOVE_FROM_CART_SUCCESS\",\n      payload: response.data.cart.products\n    });\n  } catch (error) {\n    console.error(\"Error fetching cart:\", error);\n    dispatch({\n      type: \"CART_ERROR\",\n      payload: error.response.data.message\n    });\n  }\n};\nexport const updateCartQuantity = (itemId, newQuantity) => async (dispatch, getState) => {\n  const token = localStorage.getItem(\"token\");\n  try {\n    const response = await axios.patch(\"http://localhost:4000/cart/updatequantity\", {\n      itemId,\n      newQuantity\n    }, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    dispatch({\n      type: \"UPDATE_CART_SUCCESS\",\n      payload: response.data.cart.products\n    });\n  } catch (error) {\n    console.error(\"Error updating cart:\", error);\n    dispatch({\n      type: \"CART_ERROR\",\n      payload: error.response.data.message\n    });\n  }\n};","map":{"version":3,"names":["axios","ADD_TO_CART","REMOVE_FROM_CART_SUCCESS","CART_ERROR","UPDATE_QUANTITY_SUCCESS","GET_CART_SUCCESS","GET_CART_FAIL","GET_CART_REQUEST","addToCart","itemId","dispatch","token","localStorage","getItem","Error","config","headers","Authorization","response","post","type","payload","data","error","message","console","getCart","get","cart","removeFromCart","delete","products","updateCartQuantity","newQuantity","getState","patch"],"sources":["C:/Users/bhargavi_g/Documents/Nursery_live/frontend/src/redux/actions/cartActions.jsx"],"sourcesContent":["import axios from \"axios\";\r\nexport const ADD_TO_CART = \"ADD_TO_CART\";\r\nexport const REMOVE_FROM_CART_SUCCESS = \"REMOVE_FROM_CART_SUCCESS\";\r\nexport const CART_ERROR = \"CART_ERROR\";\r\nexport const UPDATE_QUANTITY_SUCCESS = \"UPDATE_QUANTITY_SUCCESS\";\r\nexport const GET_CART_SUCCESS = \"GET_CART_SUCCESS\";\r\nexport const GET_CART_FAIL = \"GET_CART_FAIL\";\r\nexport const GET_CART_REQUEST = \"GET_CART_REQUEST\";\r\n\r\nexport const addToCart = (itemId) => async (dispatch) => {\r\n  try {\r\n    const token = localStorage.getItem(\"token\");\r\n\r\n    if (!token) {\r\n      throw new Error(\"User not authenticated\");\r\n    }\r\n\r\n    const config = {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n\r\n    if (!itemId || typeof itemId !== \"string\") {\r\n      throw new Error(\"Invalid itemId\");\r\n    }\r\n\r\n    const response = await axios.post(\r\n      \"http://localhost:4000/cart/addtocart\",\r\n      { itemId }, \r\n      config\r\n    );\r\n\r\n    dispatch({\r\n      type: \"ADD_TO_CART_SUCCESS\",\r\n      payload: response.data,\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: \"ADD_TO_CART_FAIL\",\r\n      payload: error.response ? error.response.data : error.message,\r\n    });\r\n    console.error(\r\n      \"Error adding to cart:\",\r\n      error.response ? error.response.data : error.message\r\n    );\r\n  }\r\n};\r\n\r\nexport const getCart = () => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: GET_CART_REQUEST });\r\n    const token = localStorage.getItem(\"token\");\r\n\r\n    const response = await axios.get(\"http://localhost:4000/cart/getcart\", {\r\n      headers: { Authorization: `Bearer ${token}` },\r\n    });\r\n\r\n    dispatch({ type: GET_CART_SUCCESS, payload: response.data.cart });\r\n  } catch (error) {\r\n    console.error(\"Error fetching cart:\", error); \r\n    dispatch({ type: GET_CART_FAIL, payload: error.message });\r\n  }\r\n};\r\n\r\nexport const removeFromCart = (itemId) => async (dispatch) => {\r\n  const token = localStorage.getItem(\"token\");\r\n  try {\r\n    const response = await axios.delete(\r\n      `http://localhost:4000/cart/removefromcart`,\r\n      {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n\r\n        data: { itemId },\r\n      }\r\n    );\r\n    dispatch({\r\n      type: \"REMOVE_FROM_CART_SUCCESS\",\r\n      payload: response.data.cart.products,\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error fetching cart:\", error);\r\n    dispatch({ type: \"CART_ERROR\", payload: error.response.data.message });\r\n  }\r\n};\r\n\r\nexport const updateCartQuantity =\r\n  (itemId, newQuantity) => async (dispatch, getState) => {\r\n    const token = localStorage.getItem(\"token\");\r\n    try {\r\n      const response = await axios.patch(\r\n        \"http://localhost:4000/cart/updatequantity\",\r\n        { itemId, newQuantity },\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        }\r\n      );\r\n      dispatch({\r\n        type: \"UPDATE_CART_SUCCESS\",\r\n        payload: response.data.cart.products,\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error updating cart:\", error);\r\n      dispatch({ type: \"CART_ERROR\", payload: error.response.data.message });\r\n    }\r\n  };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}