{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bhargavi_g\\\\Documents\\\\Nursery_live\\\\frontend\\\\src\\\\Context\\\\ShopContext.jsx\",\n  _s = $RefreshSig$();\n// import React, { createContext, useState, useEffect } from \"react\";\n// import axios from 'axios';\n\n// // Define getDefaultCart function\n// const getDefaultCart = (products) => {\n//   let cart = {};\n//   for (let index = 0; index < products.length; index++) {\n//     cart[products[index]._id] = 0;\n//   }\n//   return cart;\n// };\n\n// export const ShopContext = createContext(null);\n\n// const ShopContextProvider = (props) => {\n//   const [cartItems, setCartItems] = useState({});\n//   const [products, setProducts] = useState([]);\n\n//   useEffect(() => {\n//     const fetchProducts = async () => {\n//       try {\n//         const response = await axios.get('http://localhost:4000/allproducts');\n//         console.log('Fetched products:', response.data); // Debugging log\n//         setProducts(response.data);\n//         setCartItems(getDefaultCart(response.data)); // Set default cart after fetching products\n//       } catch (error) {\n//         console.error('Error fetching products:', error);\n//       }\n//     };\n\n//     fetchProducts();\n//   }, []);\n\n//   const addToCart = (itemId) => {\n//     setCartItems((prev) => ({ ...prev, [itemId]: (prev[itemId] || 0) + 1 }));\n//   };\n\n//   const removeFromCart = (itemId) => {\n//     setCartItems((prev) => ({ ...prev, [itemId]: (prev[itemId] || 0) - 1 }));\n//   };\n\n//   const getTotalCartAmount = () => {\n//     let totalAmount = 0;\n//     for (const item in cartItems) {\n//       if (cartItems[item] > 0) {\n//         let itemInfo = products.find((product) => product._id === item);\n//         if (itemInfo) {\n//           totalAmount += cartItems[item] * itemInfo.new_price;\n//         }\n//       }\n//     }\n//     return totalAmount;\n//   };\n\n//   const getTotalCartItems = () => {\n//     let totalItem = 0;\n//     for (const item in cartItems) {\n//       if (cartItems[item] > 0) {\n//         totalItem += cartItems[item];\n//       }\n//     }\n//     return totalItem;\n//   };\n\n//   const contextValue = {\n//     getTotalCartItems,\n//     getTotalCartAmount,\n//     products,\n//     cartItems,\n//     addToCart,\n//     removeFromCart\n//   };\n\n//   return (\n//     <ShopContext.Provider value={contextValue}>\n//       {props.children}\n//     </ShopContext.Provider>\n//   );\n// };\n\n// export default ShopContextProvider;\nimport React, { createContext, useState, useEffect, useMemo } from \"react\";\nimport axios from 'axios';\n\n// Define getDefaultCart function\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getDefaultCart = products => {\n  let cart = {};\n  products.forEach(product => {\n    cart[product._id] = 0;\n  });\n  return cart;\n};\nexport const ShopContext = /*#__PURE__*/createContext(null);\nconst ShopContextProvider = props => {\n  _s();\n  const [cartItems, setCartItems] = useState({});\n  const [products, setProducts] = useState([]);\n  const [error, setError] = useState(null); // Error state for handling API errors\n\n  useEffect(() => {\n    const fetchProducts = async () => {\n      try {\n        const response = await axios.get('http://localhost:4000/allproducts');\n        console.log('Fetched products:', response.data); // Debugging log\n        setProducts(response.data);\n        setCartItems(getDefaultCart(response.data)); // Set default cart after fetching products\n      } catch (error) {\n        setError('Error fetching products. Please try again later.'); // Update error state\n        console.error('Error fetching products:', error);\n      }\n    };\n    fetchProducts();\n  }, []);\n  const addToCart = itemId => {\n    setCartItems(prev => ({\n      ...prev,\n      [itemId]: (prev[itemId] || 0) + 1\n    }));\n  };\n  const removeFromCart = itemId => {\n    setCartItems(prev => ({\n      ...prev,\n      [itemId]: Math.max((prev[itemId] || 0) - 1, 0)\n    }));\n  };\n  const getTotalCartAmount = () => {\n    return products.reduce((totalAmount, product) => {\n      if (cartItems[product._id] > 0) {\n        totalAmount += cartItems[product._id] * product.new_price;\n      }\n      return totalAmount;\n    }, 0);\n  };\n  const getTotalCartItems = () => {\n    return Object.values(cartItems).reduce((totalItem, quantity) => totalItem + quantity, 0);\n  };\n\n  // Memoize the context value to prevent unnecessary re-renders\n  const contextValue = useMemo(() => ({\n    getTotalCartItems,\n    getTotalCartAmount,\n    products,\n    cartItems,\n    addToCart,\n    removeFromCart\n  }), [cartItems, products]);\n  return /*#__PURE__*/_jsxDEV(ShopContext.Provider, {\n    value: contextValue,\n    children: [error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 17\n    }, this), \" \", props.children]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 5\n  }, this);\n};\n_s(ShopContextProvider, \"wkDHZQ0CY3BCmn/1u6jK09QWsx0=\");\n_c = ShopContextProvider;\nexport default ShopContextProvider;\nvar _c;\n$RefreshReg$(_c, \"ShopContextProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useMemo","axios","jsxDEV","_jsxDEV","getDefaultCart","products","cart","forEach","product","_id","ShopContext","ShopContextProvider","props","_s","cartItems","setCartItems","setProducts","error","setError","fetchProducts","response","get","console","log","data","addToCart","itemId","prev","removeFromCart","Math","max","getTotalCartAmount","reduce","totalAmount","new_price","getTotalCartItems","Object","values","totalItem","quantity","contextValue","Provider","value","children","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/bhargavi_g/Documents/Nursery_live/frontend/src/Context/ShopContext.jsx"],"sourcesContent":["// import React, { createContext, useState, useEffect } from \"react\";\r\n// import axios from 'axios';\r\n\r\n// // Define getDefaultCart function\r\n// const getDefaultCart = (products) => {\r\n//   let cart = {};\r\n//   for (let index = 0; index < products.length; index++) {\r\n//     cart[products[index]._id] = 0;\r\n//   }\r\n//   return cart;\r\n// };\r\n\r\n// export const ShopContext = createContext(null);\r\n\r\n// const ShopContextProvider = (props) => {\r\n//   const [cartItems, setCartItems] = useState({});\r\n//   const [products, setProducts] = useState([]);\r\n\r\n//   useEffect(() => {\r\n//     const fetchProducts = async () => {\r\n//       try {\r\n//         const response = await axios.get('http://localhost:4000/allproducts');\r\n//         console.log('Fetched products:', response.data); // Debugging log\r\n//         setProducts(response.data);\r\n//         setCartItems(getDefaultCart(response.data)); // Set default cart after fetching products\r\n//       } catch (error) {\r\n//         console.error('Error fetching products:', error);\r\n//       }\r\n//     };\r\n\r\n//     fetchProducts();\r\n//   }, []);\r\n\r\n//   const addToCart = (itemId) => {\r\n//     setCartItems((prev) => ({ ...prev, [itemId]: (prev[itemId] || 0) + 1 }));\r\n//   };\r\n\r\n//   const removeFromCart = (itemId) => {\r\n//     setCartItems((prev) => ({ ...prev, [itemId]: (prev[itemId] || 0) - 1 }));\r\n//   };\r\n\r\n//   const getTotalCartAmount = () => {\r\n//     let totalAmount = 0;\r\n//     for (const item in cartItems) {\r\n//       if (cartItems[item] > 0) {\r\n//         let itemInfo = products.find((product) => product._id === item);\r\n//         if (itemInfo) {\r\n//           totalAmount += cartItems[item] * itemInfo.new_price;\r\n//         }\r\n//       }\r\n//     }\r\n//     return totalAmount;\r\n//   };\r\n\r\n//   const getTotalCartItems = () => {\r\n//     let totalItem = 0;\r\n//     for (const item in cartItems) {\r\n//       if (cartItems[item] > 0) {\r\n//         totalItem += cartItems[item];\r\n//       }\r\n//     }\r\n//     return totalItem;\r\n//   };\r\n\r\n//   const contextValue = {\r\n//     getTotalCartItems,\r\n//     getTotalCartAmount,\r\n//     products,\r\n//     cartItems,\r\n//     addToCart,\r\n//     removeFromCart\r\n//   };\r\n\r\n//   return (\r\n//     <ShopContext.Provider value={contextValue}>\r\n//       {props.children}\r\n//     </ShopContext.Provider>\r\n//   );\r\n// };\r\n\r\n// export default ShopContextProvider;\r\nimport React, { createContext, useState, useEffect, useMemo } from \"react\";\r\nimport axios from 'axios';\r\n\r\n// Define getDefaultCart function\r\nconst getDefaultCart = (products) => {\r\n  let cart = {};\r\n  products.forEach((product) => {\r\n    cart[product._id] = 0;\r\n  });\r\n  return cart;\r\n};\r\n\r\nexport const ShopContext = createContext(null);\r\n\r\nconst ShopContextProvider = (props) => {\r\n  const [cartItems, setCartItems] = useState({});\r\n  const [products, setProducts] = useState([]);\r\n  const [error, setError] = useState(null); // Error state for handling API errors\r\n\r\n  useEffect(() => {\r\n    const fetchProducts = async () => {\r\n      try {\r\n        const response = await axios.get('http://localhost:4000/allproducts');\r\n        console.log('Fetched products:', response.data); // Debugging log\r\n        setProducts(response.data);\r\n        setCartItems(getDefaultCart(response.data)); // Set default cart after fetching products\r\n      } catch (error) {\r\n        setError('Error fetching products. Please try again later.'); // Update error state\r\n        console.error('Error fetching products:', error);\r\n      }\r\n    };\r\n\r\n    fetchProducts();\r\n  }, []);\r\n\r\n  const addToCart = (itemId) => {\r\n    setCartItems((prev) => ({ ...prev, [itemId]: (prev[itemId] || 0) + 1 }));\r\n  };\r\n\r\n  const removeFromCart = (itemId) => {\r\n    setCartItems((prev) => ({ ...prev, [itemId]: Math.max((prev[itemId] || 0) - 1, 0) }));\r\n  };\r\n\r\n  const getTotalCartAmount = () => {\r\n    return products.reduce((totalAmount, product) => {\r\n      if (cartItems[product._id] > 0) {\r\n        totalAmount += cartItems[product._id] * product.new_price;\r\n      }\r\n      return totalAmount;\r\n    }, 0);\r\n  };\r\n\r\n  const getTotalCartItems = () => {\r\n    return Object.values(cartItems).reduce((totalItem, quantity) => totalItem + quantity, 0);\r\n  };\r\n\r\n  // Memoize the context value to prevent unnecessary re-renders\r\n  const contextValue = useMemo(() => ({\r\n    getTotalCartItems,\r\n    getTotalCartAmount,\r\n    products,\r\n    cartItems,\r\n    addToCart,\r\n    removeFromCart\r\n  }), [cartItems, products]);\r\n\r\n  return (\r\n    <ShopContext.Provider value={contextValue}>\r\n      {error && <div className=\"error-message\">{error}</div>} {/* Error message display */}\r\n      {props.children}\r\n    </ShopContext.Provider>\r\n  );\r\n};\r\n\r\nexport default ShopContextProvider;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}