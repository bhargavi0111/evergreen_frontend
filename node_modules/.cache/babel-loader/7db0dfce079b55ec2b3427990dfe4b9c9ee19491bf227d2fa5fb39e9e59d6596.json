{"ast":null,"code":"// // src/redux/types/cartTypes.js\n\n// // src/redux/actions/cartActions.js\n// import axios from 'axios';\n// export const FETCH_CART_ITEMS = 'FETCH_CART_ITEMS';\n// export const ADD_TO_CART = 'ADD_TO_CART';\n// export const REMOVE_FROM_CART = 'REMOVE_FROM_CART';\n// export const UPDATE_CART_QUANTITY = 'UPDATE_CART_QUANTITY';\n\n// export const fetchCartItems = (userId) => async (dispatch) => {\n//   try {\n//     const response = await axios.get(`/cart/addtocart/${userId}`);\n//     dispatch({\n//       type: FETCH_CART_ITEMS,\n//       payload: response.data,\n//     });\n//   } catch (error) {\n//     console.error('Error fetching cart items:', error);\n//   }\n// };\n\n// export const addToCart = (product) => async (dispatch, getState) => {\n//   try {\n//     const { user } = getState().auth; // Assuming you have an auth reducer with user info\n//     if (!user) {\n//       throw new Error('User not authenticated');\n//     }\n\n//     const response = await axios.post('/api/addtocart', {\n//       userId: user._id,\n//       productId: product._id,\n//       quantity: 1, // You can modify this if you want to allow adding multiple quantities\n//     });\n\n//     dispatch({\n//       type: ADD_TO_CART,\n//       payload: {\n//         ...product,\n//         quantity: 1,\n//       },\n//     });\n\n//     // Optionally, you can fetch the updated cart after adding an item\n//     dispatch(fetchCartItems(user._id));\n//   } catch (error) {\n//     console.error('Error adding to cart:', error);\n//     // Handle error (e.g., show an error message to the user)\n//   }\n// };\n// src/redux/cartActions.js\n\n// Add to Cart\n\nimport axios from 'axios';\n\n// Action Types\nexport const GET_CART = 'GET_CART';\nexport const ADD_TO_CART = 'ADD_TO_CART';\nexport const REMOVE_FROM_CART = 'REMOVE_FROM_CART';\nexport const CART_ERROR = 'CART_ERROR';\nconst API_URL = 'http://localhost:4000/cart';\n\n// Ensure that you're accessing the correct part of the state\n\n// Action Creators\n\n// // Add product to cart\n// export const addToCart = (product) => async (dispatch, getState) => {\n//   try {\n//     console.log(\"add to cart started\");\n\n//     // Retrieve the token from Redux state\n//     const { token } = getState().user; \n//     if (!token) {\n//       console.error(\"No token found\");\n//       return;\n//     }\n\n//     console.log(\"Token retrieved:\", token);\n\n//     // Authorization headers\n//     const config = {\n//       headers: {\n//         'Content-Type': 'application/json',\n//         'Authorization': `Bearer ${token}` \n//       }\n//     };\n\n//     console.log(\"Authorization headers set\");\n\n//     // Making API request\n//     const res = await axios.post('http://localhost:4000/cart/addtocart', {\n//       itemId: product._id\n//     }, config);\n\n//     console.log(\"API response:\", res);\n\n//     // Dispatch success action\n//     dispatch({\n//       type: ADD_TO_CART,\n//       payload: res.data\n//     });\n\n//     console.log(\"Product added to cart\");\n\n//   } catch (error) {\n//     console.error(\"Error adding to cart:\", error.response?.data || error.message);\n\n//     dispatch({\n//       type: CART_ERROR,\n//       payload: error.response?.data || 'An error occurred'\n//     });\n//   }\n// };\n// Example of an action to add to the cart\\\n\n// cartActions.jsx\nexport const handleAddToCart = product => async (dispatch, getState) => {\n  const {\n    isAuthenticated,\n    token\n  } = getState().auth;\n  if (!isAuthenticated || !token) {\n    console.error('User not authenticated');\n    return;\n  }\n  try {\n    const response = await fetch(`${backend_ur}/cart`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}` // Ensure token is sent\n      },\n\n      body: JSON.stringify({\n        product\n      })\n    });\n    if (!response.ok) {\n      throw new Error('Network response was not ok.');\n    }\n\n    // Handle successful addition to cart\n  } catch (error) {\n    console.error('Error adding to cart:', error);\n  }\n};\nexport const addToCart = productId => async (dispatch, getState) => {\n  try {\n    var _getState$auth;\n    const {\n      token\n    } = ((_getState$auth = getState().auth) === null || _getState$auth === void 0 ? void 0 : _getState$auth.user) || {}; // Get token from auth state\n\n    if (!token) {\n      throw new Error('User not authenticated');\n    }\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`\n      }\n    };\n    const {\n      data\n    } = await axios.post(`/api/cart`, {\n      productId\n    }, config);\n    dispatch({\n      type: 'ADD_TO_CART_SUCCESS',\n      payload: data\n    });\n  } catch (error) {\n    console.error('Error adding to cart:', error.message);\n    dispatch({\n      type: 'ADD_TO_CART_FAIL',\n      payload: error.message\n    });\n  }\n};\n\n// Get cart items\nexport const getCart = () => async (dispatch, getState) => {\n  try {\n    console.log(\"getcart started\");\n    const {\n      token\n    } = getState().user;\n    if (!token) {\n      console.error(\"No token found\");\n      return;\n    }\n    console.log(\"Token retrieved:\", token);\n    const config = {\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    };\n    console.log(\"Authorization headers set\");\n    const res = await axios.get('http://localhost:4000/cart/getcart', config);\n    console.log(\"API response:\", res);\n    dispatch({\n      type: GET_CART,\n      payload: res.data\n    });\n    console.log(\"Cart items fetched\");\n  } catch (error) {\n    var _error$response, _error$response2;\n    console.error(\"Error getting cart items:\", ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n    dispatch({\n      type: CART_ERROR,\n      payload: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || 'An error occurred'\n    });\n  }\n};\nexport const removeFromCart = itemId => async dispatch => {\n  try {\n    const res = await axios.delete(`${API_URL}/removefromcart`, {\n      data: {\n        itemId\n      }\n    });\n    dispatch({\n      type: REMOVE_FROM_CART,\n      payload: itemId\n    });\n  } catch (error) {\n    dispatch({\n      type: CART_ERROR,\n      payload: error.response.data\n    });\n  }\n};","map":{"version":3,"names":["axios","GET_CART","ADD_TO_CART","REMOVE_FROM_CART","CART_ERROR","API_URL","handleAddToCart","product","dispatch","getState","isAuthenticated","token","auth","console","error","response","fetch","backend_ur","method","headers","body","JSON","stringify","ok","Error","addToCart","productId","_getState$auth","user","config","Authorization","data","post","type","payload","message","getCart","log","res","get","_error$response","_error$response2","removeFromCart","itemId","delete"],"sources":["C:/Users/bhargavi_g/Documents/Nursery_live/frontend/src/redux/actions/cartActions.jsx"],"sourcesContent":["// // src/redux/types/cartTypes.js\r\n\r\n// // src/redux/actions/cartActions.js\r\n// import axios from 'axios';\r\n// export const FETCH_CART_ITEMS = 'FETCH_CART_ITEMS';\r\n// export const ADD_TO_CART = 'ADD_TO_CART';\r\n// export const REMOVE_FROM_CART = 'REMOVE_FROM_CART';\r\n// export const UPDATE_CART_QUANTITY = 'UPDATE_CART_QUANTITY';\r\n\r\n\r\n\r\n// export const fetchCartItems = (userId) => async (dispatch) => {\r\n//   try {\r\n//     const response = await axios.get(`/cart/addtocart/${userId}`);\r\n//     dispatch({\r\n//       type: FETCH_CART_ITEMS,\r\n//       payload: response.data,\r\n//     });\r\n//   } catch (error) {\r\n//     console.error('Error fetching cart items:', error);\r\n//   }\r\n// };\r\n\r\n// export const addToCart = (product) => async (dispatch, getState) => {\r\n//   try {\r\n//     const { user } = getState().auth; // Assuming you have an auth reducer with user info\r\n//     if (!user) {\r\n//       throw new Error('User not authenticated');\r\n//     }\r\n\r\n//     const response = await axios.post('/api/addtocart', {\r\n//       userId: user._id,\r\n//       productId: product._id,\r\n//       quantity: 1, // You can modify this if you want to allow adding multiple quantities\r\n//     });\r\n\r\n//     dispatch({\r\n//       type: ADD_TO_CART,\r\n//       payload: {\r\n//         ...product,\r\n//         quantity: 1,\r\n//       },\r\n//     });\r\n\r\n//     // Optionally, you can fetch the updated cart after adding an item\r\n//     dispatch(fetchCartItems(user._id));\r\n//   } catch (error) {\r\n//     console.error('Error adding to cart:', error);\r\n//     // Handle error (e.g., show an error message to the user)\r\n//   }\r\n// };\r\n// src/redux/cartActions.js\r\n\r\n// Add to Cart\r\n\r\n\r\nimport axios from 'axios';\r\n\r\n// Action Types\r\nexport const GET_CART = 'GET_CART';\r\nexport const ADD_TO_CART = 'ADD_TO_CART';\r\nexport const REMOVE_FROM_CART = 'REMOVE_FROM_CART';\r\nexport const CART_ERROR = 'CART_ERROR';\r\nconst API_URL = 'http://localhost:4000/cart';\r\n\r\n// Ensure that you're accessing the correct part of the state\r\n\r\n\r\n// Action Creators\r\n\r\n// // Add product to cart\r\n// export const addToCart = (product) => async (dispatch, getState) => {\r\n//   try {\r\n//     console.log(\"add to cart started\");\r\n    \r\n//     // Retrieve the token from Redux state\r\n//     const { token } = getState().user; \r\n//     if (!token) {\r\n//       console.error(\"No token found\");\r\n//       return;\r\n//     }\r\n    \r\n//     console.log(\"Token retrieved:\", token);\r\n\r\n//     // Authorization headers\r\n//     const config = {\r\n//       headers: {\r\n//         'Content-Type': 'application/json',\r\n//         'Authorization': `Bearer ${token}` \r\n//       }\r\n//     };\r\n\r\n//     console.log(\"Authorization headers set\");\r\n\r\n//     // Making API request\r\n//     const res = await axios.post('http://localhost:4000/cart/addtocart', {\r\n//       itemId: product._id\r\n//     }, config);\r\n    \r\n//     console.log(\"API response:\", res);\r\n\r\n//     // Dispatch success action\r\n//     dispatch({\r\n//       type: ADD_TO_CART,\r\n//       payload: res.data\r\n//     });\r\n\r\n//     console.log(\"Product added to cart\");\r\n\r\n//   } catch (error) {\r\n//     console.error(\"Error adding to cart:\", error.response?.data || error.message);\r\n\r\n//     dispatch({\r\n//       type: CART_ERROR,\r\n//       payload: error.response?.data || 'An error occurred'\r\n//     });\r\n//   }\r\n// };\r\n// Example of an action to add to the cart\\\r\n\r\n// cartActions.jsx\r\nexport const handleAddToCart = (product) => async (dispatch, getState) => {\r\n  const { isAuthenticated, token } = getState().auth;\r\n\r\n  if (!isAuthenticated || !token) {\r\n    console.error('User not authenticated');\r\n    return;\r\n  }\r\n\r\n  try {\r\n    const response = await fetch(`${backend_ur}/cart`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${token}` // Ensure token is sent\r\n      },\r\n      body: JSON.stringify({ product })\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Network response was not ok.');\r\n    }\r\n\r\n    // Handle successful addition to cart\r\n  } catch (error) {\r\n    console.error('Error adding to cart:', error);\r\n  }\r\n};\r\n\r\n\r\nexport const addToCart = (productId) => async (dispatch, getState) => {\r\n  try {\r\n    const { token } = getState().auth?.user || {}; // Get token from auth state\r\n\r\n    if (!token) {\r\n      throw new Error('User not authenticated');\r\n    }\r\n\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: `Bearer ${token}`\r\n      }\r\n    };\r\n\r\n    const { data } = await axios.post(`/api/cart`, { productId }, config);\r\n\r\n    dispatch({\r\n      type: 'ADD_TO_CART_SUCCESS',\r\n      payload: data\r\n    });\r\n  } catch (error) {\r\n    console.error('Error adding to cart:', error.message);\r\n    dispatch({\r\n      type: 'ADD_TO_CART_FAIL',\r\n      payload: error.message\r\n    });\r\n  }\r\n};\r\n\r\n\r\n// Get cart items\r\nexport const getCart = () => async (dispatch, getState) => {\r\n  try {\r\n    console.log(\"getcart started\");\r\n\r\n    const { token } = getState().user;\r\n    if (!token) {\r\n      console.error(\"No token found\");\r\n      return;\r\n    }\r\n\r\n    console.log(\"Token retrieved:\", token);\r\n\r\n    const config = {\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`\r\n      }\r\n    };\r\n\r\n    console.log(\"Authorization headers set\");\r\n\r\n    const res = await axios.get('http://localhost:4000/cart/getcart', config);\r\n    \r\n    console.log(\"API response:\", res);\r\n\r\n    dispatch({\r\n      type: GET_CART,\r\n      payload: res.data\r\n    });\r\n\r\n    console.log(\"Cart items fetched\");\r\n\r\n  } catch (error) {\r\n    console.error(\"Error getting cart items:\", error.response?.data || error.message);\r\n\r\n    dispatch({\r\n      type: CART_ERROR,\r\n      payload: error.response?.data || 'An error occurred'\r\n    });\r\n  }\r\n};\r\n\r\n\r\nexport const removeFromCart = (itemId) => async dispatch => {\r\n  try {\r\n    const res = await axios.delete(`${API_URL}/removefromcart`, { data: { itemId } });\r\n    dispatch({\r\n      type: REMOVE_FROM_CART,\r\n      payload: itemId\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: CART_ERROR,\r\n      payload: error.response.data\r\n    });\r\n  }\r\n};\r\n\r\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,OAAO,MAAMC,QAAQ,GAAG,UAAU;AAClC,OAAO,MAAMC,WAAW,GAAG,aAAa;AACxC,OAAO,MAAMC,gBAAgB,GAAG,kBAAkB;AAClD,OAAO,MAAMC,UAAU,GAAG,YAAY;AACtC,MAAMC,OAAO,GAAG,4BAA4B;;AAE5C;;AAGA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAO,MAAMC,eAAe,GAAIC,OAAO,IAAK,OAAOC,QAAQ,EAAEC,QAAQ,KAAK;EACxE,MAAM;IAAEC,eAAe;IAAEC;EAAM,CAAC,GAAGF,QAAQ,CAAC,CAAC,CAACG,IAAI;EAElD,IAAI,CAACF,eAAe,IAAI,CAACC,KAAK,EAAE;IAC9BE,OAAO,CAACC,KAAK,CAAC,wBAAwB,CAAC;IACvC;EACF;EAEA,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEC,UAAW,OAAM,EAAE;MACjDC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAG,UAASR,KAAM,EAAC,CAAC;MACrC,CAAC;;MACDS,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEf;MAAQ,CAAC;IAClC,CAAC,CAAC;IAEF,IAAI,CAACQ,QAAQ,CAACQ,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,8BAA8B,CAAC;IACjD;;IAEA;EACF,CAAC,CAAC,OAAOV,KAAK,EAAE;IACdD,OAAO,CAACC,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;EAC/C;AACF,CAAC;AAGD,OAAO,MAAMW,SAAS,GAAIC,SAAS,IAAK,OAAOlB,QAAQ,EAAEC,QAAQ,KAAK;EACpE,IAAI;IAAA,IAAAkB,cAAA;IACF,MAAM;MAAEhB;IAAM,CAAC,GAAG,EAAAgB,cAAA,GAAAlB,QAAQ,CAAC,CAAC,CAACG,IAAI,cAAAe,cAAA,uBAAfA,cAAA,CAAiBC,IAAI,KAAI,CAAC,CAAC,CAAC,CAAC;;IAE/C,IAAI,CAACjB,KAAK,EAAE;MACV,MAAM,IAAIa,KAAK,CAAC,wBAAwB,CAAC;IAC3C;IAEA,MAAMK,MAAM,GAAG;MACbV,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClCW,aAAa,EAAG,UAASnB,KAAM;MACjC;IACF,CAAC;IAED,MAAM;MAAEoB;IAAK,CAAC,GAAG,MAAM/B,KAAK,CAACgC,IAAI,CAAE,WAAU,EAAE;MAAEN;IAAU,CAAC,EAAEG,MAAM,CAAC;IAErErB,QAAQ,CAAC;MACPyB,IAAI,EAAE,qBAAqB;MAC3BC,OAAO,EAAEH;IACX,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOjB,KAAK,EAAE;IACdD,OAAO,CAACC,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAACqB,OAAO,CAAC;IACrD3B,QAAQ,CAAC;MACPyB,IAAI,EAAE,kBAAkB;MACxBC,OAAO,EAAEpB,KAAK,CAACqB;IACjB,CAAC,CAAC;EACJ;AACF,CAAC;;AAGD;AACA,OAAO,MAAMC,OAAO,GAAGA,CAAA,KAAM,OAAO5B,QAAQ,EAAEC,QAAQ,KAAK;EACzD,IAAI;IACFI,OAAO,CAACwB,GAAG,CAAC,iBAAiB,CAAC;IAE9B,MAAM;MAAE1B;IAAM,CAAC,GAAGF,QAAQ,CAAC,CAAC,CAACmB,IAAI;IACjC,IAAI,CAACjB,KAAK,EAAE;MACVE,OAAO,CAACC,KAAK,CAAC,gBAAgB,CAAC;MAC/B;IACF;IAEAD,OAAO,CAACwB,GAAG,CAAC,kBAAkB,EAAE1B,KAAK,CAAC;IAEtC,MAAMkB,MAAM,GAAG;MACbV,OAAO,EAAE;QACP,eAAe,EAAG,UAASR,KAAM;MACnC;IACF,CAAC;IAEDE,OAAO,CAACwB,GAAG,CAAC,2BAA2B,CAAC;IAExC,MAAMC,GAAG,GAAG,MAAMtC,KAAK,CAACuC,GAAG,CAAC,oCAAoC,EAAEV,MAAM,CAAC;IAEzEhB,OAAO,CAACwB,GAAG,CAAC,eAAe,EAAEC,GAAG,CAAC;IAEjC9B,QAAQ,CAAC;MACPyB,IAAI,EAAEhC,QAAQ;MACdiC,OAAO,EAAEI,GAAG,CAACP;IACf,CAAC,CAAC;IAEFlB,OAAO,CAACwB,GAAG,CAAC,oBAAoB,CAAC;EAEnC,CAAC,CAAC,OAAOvB,KAAK,EAAE;IAAA,IAAA0B,eAAA,EAAAC,gBAAA;IACd5B,OAAO,CAACC,KAAK,CAAC,2BAA2B,EAAE,EAAA0B,eAAA,GAAA1B,KAAK,CAACC,QAAQ,cAAAyB,eAAA,uBAAdA,eAAA,CAAgBT,IAAI,KAAIjB,KAAK,CAACqB,OAAO,CAAC;IAEjF3B,QAAQ,CAAC;MACPyB,IAAI,EAAE7B,UAAU;MAChB8B,OAAO,EAAE,EAAAO,gBAAA,GAAA3B,KAAK,CAACC,QAAQ,cAAA0B,gBAAA,uBAAdA,gBAAA,CAAgBV,IAAI,KAAI;IACnC,CAAC,CAAC;EACJ;AACF,CAAC;AAGD,OAAO,MAAMW,cAAc,GAAIC,MAAM,IAAK,MAAMnC,QAAQ,IAAI;EAC1D,IAAI;IACF,MAAM8B,GAAG,GAAG,MAAMtC,KAAK,CAAC4C,MAAM,CAAE,GAAEvC,OAAQ,iBAAgB,EAAE;MAAE0B,IAAI,EAAE;QAAEY;MAAO;IAAE,CAAC,CAAC;IACjFnC,QAAQ,CAAC;MACPyB,IAAI,EAAE9B,gBAAgB;MACtB+B,OAAO,EAAES;IACX,CAAC,CAAC;EACJ,CAAC,CAAC,OAAO7B,KAAK,EAAE;IACdN,QAAQ,CAAC;MACPyB,IAAI,EAAE7B,UAAU;MAChB8B,OAAO,EAAEpB,KAAK,CAACC,QAAQ,CAACgB;IAC1B,CAAC,CAAC;EACJ;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}