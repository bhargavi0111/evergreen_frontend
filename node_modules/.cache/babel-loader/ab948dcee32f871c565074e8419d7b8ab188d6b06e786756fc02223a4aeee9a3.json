{"ast":null,"code":"const initialState = {\n  token: localStorage.getItem('token'),\n  isAuthenticated: !!localStorage.getItem('token'),\n  // Set based on token presence\n  user: null,\n  error: null,\n  forgotPasswordMessage: '',\n  forgotPasswordError: '',\n  resetPasswordMessage: '',\n  resetPasswordError: ''\n};\nconst authReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'LOGIN_SUCCESS':\n    case 'SIGNUP_SUCCESS':\n    case 'LOAD_USER':\n      return {\n        ...state,\n        token: action.payload.token,\n        // Store token\n        user: action.payload.user,\n        // Store user info\n        isAuthenticated: true,\n        error: null\n      };\n    case 'LOGIN_FAIL':\n    case 'SIGNUP_FAIL':\n      return {\n        ...state,\n        error: action.payload,\n        isAuthenticated: false,\n        user: null\n      };\n    case 'FORGOT_PASSWORD_SUCCESS':\n      return {\n        ...state,\n        forgotPasswordMessage: action.payload,\n        forgotPasswordError: ''\n      };\n    case 'FORGOT_PASSWORD_FAIL':\n      return {\n        ...state,\n        forgotPasswordError: action.payload,\n        forgotPasswordMessage: ''\n      };\n    case 'RESET_PASSWORD_SUCCESS':\n      return {\n        ...state,\n        resetPasswordMessage: action.payload,\n        resetPasswordError: ''\n      };\n    case 'RESET_PASSWORD_FAIL':\n      return {\n        ...state,\n        resetPasswordError: action.payload,\n        resetPasswordMessage: ''\n      };\n    case 'CLEAR_FORGOT_PASSWORD_MESSAGES':\n      return {\n        ...state,\n        forgotPasswordMessage: '',\n        forgotPasswordError: ''\n      };\n    case 'CLEAR_RESET_PASSWORD_MESSAGES':\n      return {\n        ...state,\n        resetPasswordMessage: '',\n        resetPasswordError: ''\n      };\n    case 'LOGOUT':\n      return {\n        ...state,\n        token: null,\n        isAuthenticated: false,\n        user: null\n      };\n    default:\n      return state;\n  }\n};\nexport default authReducer;","map":{"version":3,"names":["initialState","token","localStorage","getItem","isAuthenticated","user","error","forgotPasswordMessage","forgotPasswordError","resetPasswordMessage","resetPasswordError","authReducer","state","action","type","payload"],"sources":["C:/Users/bhargavi_g/Documents/Nursery_live/frontend/src/redux/reducers/authReducer.jsx"],"sourcesContent":[" \r\nconst initialState = {\r\n  token: localStorage.getItem('token'),\r\n  isAuthenticated: !!localStorage.getItem('token'), // Set based on token presence\r\n  user: null,\r\n  error: null,\r\n  forgotPasswordMessage: '',\r\n  forgotPasswordError: '',\r\n  resetPasswordMessage: '',\r\n  resetPasswordError: '',\r\n};\r\n\r\nconst authReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case 'LOGIN_SUCCESS':\r\n    case 'SIGNUP_SUCCESS':\r\n    case 'LOAD_USER':\r\n      return {\r\n        ...state,\r\n        token: action.payload.token,  // Store token\r\n        user: action.payload.user,    // Store user info\r\n        isAuthenticated: true,\r\n        error: null,\r\n      };\r\n      \r\n    case 'LOGIN_FAIL':\r\n    case 'SIGNUP_FAIL':\r\n      return {\r\n        ...state,\r\n        error: action.payload,\r\n        isAuthenticated: false,\r\n        user: null,\r\n      };\r\n      case 'FORGOT_PASSWORD_SUCCESS':\r\n        return {\r\n          ...state,\r\n          forgotPasswordMessage: action.payload,\r\n          forgotPasswordError: '',\r\n        };\r\n      case 'FORGOT_PASSWORD_FAIL':\r\n        return {\r\n          ...state,\r\n          forgotPasswordError: action.payload,\r\n          forgotPasswordMessage: '',\r\n        };\r\n      case 'RESET_PASSWORD_SUCCESS':\r\n        return {\r\n          ...state,\r\n          resetPasswordMessage: action.payload,\r\n          resetPasswordError: '',\r\n        };\r\n      case 'RESET_PASSWORD_FAIL':\r\n        return {\r\n          ...state,\r\n          resetPasswordError: action.payload,\r\n          resetPasswordMessage: '',\r\n        };\r\n        case 'CLEAR_FORGOT_PASSWORD_MESSAGES':\r\n          return {\r\n            ...state,\r\n            forgotPasswordMessage: '',\r\n            forgotPasswordError: '',\r\n          };\r\n        case 'CLEAR_RESET_PASSWORD_MESSAGES':\r\n          return {\r\n            ...state,\r\n            resetPasswordMessage: '',\r\n            resetPasswordError: '',\r\n          };\r\n\r\n    case 'LOGOUT':\r\n      return {\r\n        ...state,\r\n        token: null,\r\n        isAuthenticated: false,\r\n        user: null,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default authReducer;\r\n"],"mappings":"AACA,MAAMA,YAAY,GAAG;EACnBC,KAAK,EAAEC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EACpCC,eAAe,EAAE,CAAC,CAACF,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAAE;EAClDE,IAAI,EAAE,IAAI;EACVC,KAAK,EAAE,IAAI;EACXC,qBAAqB,EAAE,EAAE;EACzBC,mBAAmB,EAAE,EAAE;EACvBC,oBAAoB,EAAE,EAAE;EACxBC,kBAAkB,EAAE;AACtB,CAAC;AAED,MAAMC,WAAW,GAAGA,CAACC,KAAK,GAAGZ,YAAY,EAAEa,MAAM,KAAK;EACpD,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAK,eAAe;IACpB,KAAK,gBAAgB;IACrB,KAAK,WAAW;MACd,OAAO;QACL,GAAGF,KAAK;QACRX,KAAK,EAAEY,MAAM,CAACE,OAAO,CAACd,KAAK;QAAG;QAC9BI,IAAI,EAAEQ,MAAM,CAACE,OAAO,CAACV,IAAI;QAAK;QAC9BD,eAAe,EAAE,IAAI;QACrBE,KAAK,EAAE;MACT,CAAC;IAEH,KAAK,YAAY;IACjB,KAAK,aAAa;MAChB,OAAO;QACL,GAAGM,KAAK;QACRN,KAAK,EAAEO,MAAM,CAACE,OAAO;QACrBX,eAAe,EAAE,KAAK;QACtBC,IAAI,EAAE;MACR,CAAC;IACD,KAAK,yBAAyB;MAC5B,OAAO;QACL,GAAGO,KAAK;QACRL,qBAAqB,EAAEM,MAAM,CAACE,OAAO;QACrCP,mBAAmB,EAAE;MACvB,CAAC;IACH,KAAK,sBAAsB;MACzB,OAAO;QACL,GAAGI,KAAK;QACRJ,mBAAmB,EAAEK,MAAM,CAACE,OAAO;QACnCR,qBAAqB,EAAE;MACzB,CAAC;IACH,KAAK,wBAAwB;MAC3B,OAAO;QACL,GAAGK,KAAK;QACRH,oBAAoB,EAAEI,MAAM,CAACE,OAAO;QACpCL,kBAAkB,EAAE;MACtB,CAAC;IACH,KAAK,qBAAqB;MACxB,OAAO;QACL,GAAGE,KAAK;QACRF,kBAAkB,EAAEG,MAAM,CAACE,OAAO;QAClCN,oBAAoB,EAAE;MACxB,CAAC;IACD,KAAK,gCAAgC;MACnC,OAAO;QACL,GAAGG,KAAK;QACRL,qBAAqB,EAAE,EAAE;QACzBC,mBAAmB,EAAE;MACvB,CAAC;IACH,KAAK,+BAA+B;MAClC,OAAO;QACL,GAAGI,KAAK;QACRH,oBAAoB,EAAE,EAAE;QACxBC,kBAAkB,EAAE;MACtB,CAAC;IAEP,KAAK,QAAQ;MACX,OAAO;QACL,GAAGE,KAAK;QACRX,KAAK,EAAE,IAAI;QACXG,eAAe,EAAE,KAAK;QACtBC,IAAI,EAAE;MACR,CAAC;IAEH;MACE,OAAOO,KAAK;EAChB;AACF,CAAC;AAED,eAAeD,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}