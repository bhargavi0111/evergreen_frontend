{"ast":null,"code":"// // src/redux/types/cartTypes.js\n\n// // src/redux/actions/cartActions.js\n// import axios from 'axios';\n// export const FETCH_CART_ITEMS = 'FETCH_CART_ITEMS';\n// export const ADD_TO_CART = 'ADD_TO_CART';\n// export const REMOVE_FROM_CART = 'REMOVE_FROM_CART';\n// export const UPDATE_CART_QUANTITY = 'UPDATE_CART_QUANTITY';\n\n// export const fetchCartItems = (userId) => async (dispatch) => {\n//   try {\n//     const response = await axios.get(`/cart/addtocart/${userId}`);\n//     dispatch({\n//       type: FETCH_CART_ITEMS,\n//       payload: response.data,\n//     });\n//   } catch (error) {\n//     console.error('Error fetching cart items:', error);\n//   }\n// };\n\n// export const addToCart = (product) => async (dispatch, getState) => {\n//   try {\n//     const { user } = getState().auth; // Assuming you have an auth reducer with user info\n//     if (!user) {\n//       throw new Error('User not authenticated');\n//     }\n\n//     const response = await axios.post('/api/addtocart', {\n//       userId: user._id,\n//       productId: product._id,\n//       quantity: 1, // You can modify this if you want to allow adding multiple quantities\n//     });\n\n//     dispatch({\n//       type: ADD_TO_CART,\n//       payload: {\n//         ...product,\n//         quantity: 1,\n//       },\n//     });\n\n//     // Optionally, you can fetch the updated cart after adding an item\n//     dispatch(fetchCartItems(user._id));\n//   } catch (error) {\n//     console.error('Error adding to cart:', error);\n//     // Handle error (e.g., show an error message to the user)\n//   }\n// };\n// src/redux/cartActions.js\n\n// Add to Cart\n\nimport axios from 'axios';\n\n// Action Types\nexport const GET_CART = 'GET_CART';\nexport const ADD_TO_CART = 'ADD_TO_CART';\nexport const REMOVE_FROM_CART = 'REMOVE_FROM_CART';\nexport const CART_ERROR = 'CART_ERROR';\nconst API_URL = 'http://localhost:4000/cart';\n\n// Action Creators\nexport const getCart = () => async dispatch => {\n  try {\n    const res = await axios.get('/c/getcart');\n    dispatch({\n      type: GET_CART,\n      payload: res.data.cart\n    });\n  } catch (error) {\n    dispatch({\n      type: CART_ERROR,\n      payload: error.response.data\n    });\n  }\n};\nexport const addToCart = itemId => async dispatch => {\n  try {\n    const res = await axios.post('/cart/addtocart', {\n      itemId\n    });\n    dispatch({\n      type: ADD_TO_CART,\n      payload: res.data.cart\n    });\n  } catch (error) {\n    dispatch({\n      type: CART_ERROR,\n      payload: error.response.data\n    });\n  }\n};\nexport const removeFromCart = itemId => async dispatch => {\n  try {\n    const res = await axios.delete('/cart/removefromcart', {\n      data: {\n        itemId\n      }\n    });\n    dispatch({\n      type: REMOVE_FROM_CART,\n      payload: itemId\n    });\n  } catch (error) {\n    dispatch({\n      type: CART_ERROR,\n      payload: error.response.data\n    });\n  }\n};","map":{"version":3,"names":["axios","GET_CART","ADD_TO_CART","REMOVE_FROM_CART","CART_ERROR","API_URL","getCart","dispatch","res","get","type","payload","data","cart","error","response","addToCart","itemId","post","removeFromCart","delete"],"sources":["C:/Users/bhargavi_g/Documents/Nursery_live/frontend/src/redux/actions/cartActions.jsx"],"sourcesContent":["// // src/redux/types/cartTypes.js\r\n\r\n// // src/redux/actions/cartActions.js\r\n// import axios from 'axios';\r\n// export const FETCH_CART_ITEMS = 'FETCH_CART_ITEMS';\r\n// export const ADD_TO_CART = 'ADD_TO_CART';\r\n// export const REMOVE_FROM_CART = 'REMOVE_FROM_CART';\r\n// export const UPDATE_CART_QUANTITY = 'UPDATE_CART_QUANTITY';\r\n\r\n\r\n\r\n// export const fetchCartItems = (userId) => async (dispatch) => {\r\n//   try {\r\n//     const response = await axios.get(`/cart/addtocart/${userId}`);\r\n//     dispatch({\r\n//       type: FETCH_CART_ITEMS,\r\n//       payload: response.data,\r\n//     });\r\n//   } catch (error) {\r\n//     console.error('Error fetching cart items:', error);\r\n//   }\r\n// };\r\n\r\n// export const addToCart = (product) => async (dispatch, getState) => {\r\n//   try {\r\n//     const { user } = getState().auth; // Assuming you have an auth reducer with user info\r\n//     if (!user) {\r\n//       throw new Error('User not authenticated');\r\n//     }\r\n\r\n//     const response = await axios.post('/api/addtocart', {\r\n//       userId: user._id,\r\n//       productId: product._id,\r\n//       quantity: 1, // You can modify this if you want to allow adding multiple quantities\r\n//     });\r\n\r\n//     dispatch({\r\n//       type: ADD_TO_CART,\r\n//       payload: {\r\n//         ...product,\r\n//         quantity: 1,\r\n//       },\r\n//     });\r\n\r\n//     // Optionally, you can fetch the updated cart after adding an item\r\n//     dispatch(fetchCartItems(user._id));\r\n//   } catch (error) {\r\n//     console.error('Error adding to cart:', error);\r\n//     // Handle error (e.g., show an error message to the user)\r\n//   }\r\n// };\r\n// src/redux/cartActions.js\r\n\r\n// Add to Cart\r\n\r\n\r\nimport axios from 'axios';\r\n\r\n// Action Types\r\nexport const GET_CART = 'GET_CART';\r\nexport const ADD_TO_CART = 'ADD_TO_CART';\r\nexport const REMOVE_FROM_CART = 'REMOVE_FROM_CART';\r\nexport const CART_ERROR = 'CART_ERROR';\r\nconst API_URL = 'http://localhost:4000/cart';\r\n\r\n\r\n// Action Creators\r\nexport const getCart = () => async dispatch => {\r\n  try {\r\n    const res = await axios.get('/c/getcart');\r\n    dispatch({\r\n      type: GET_CART,\r\n      payload: res.data.cart\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: CART_ERROR,\r\n      payload: error.response.data\r\n    });\r\n  }\r\n};\r\n\r\nexport const addToCart = (itemId) => async dispatch => {\r\n  try {\r\n    const res = await axios.post('/cart/addtocart', { itemId });\r\n    dispatch({\r\n      type: ADD_TO_CART,\r\n      payload: res.data.cart\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: CART_ERROR,\r\n      payload: error.response.data\r\n    });\r\n  }\r\n};\r\n\r\nexport const removeFromCart = (itemId) => async dispatch => {\r\n  try {\r\n    const res = await axios.delete('/cart/removefromcart', { data: { itemId } });\r\n    dispatch({\r\n      type: REMOVE_FROM_CART,\r\n      payload: itemId\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: CART_ERROR,\r\n      payload: error.response.data\r\n    });\r\n  }\r\n};\r\n\r\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,OAAO,MAAMC,QAAQ,GAAG,UAAU;AAClC,OAAO,MAAMC,WAAW,GAAG,aAAa;AACxC,OAAO,MAAMC,gBAAgB,GAAG,kBAAkB;AAClD,OAAO,MAAMC,UAAU,GAAG,YAAY;AACtC,MAAMC,OAAO,GAAG,4BAA4B;;AAG5C;AACA,OAAO,MAAMC,OAAO,GAAGA,CAAA,KAAM,MAAMC,QAAQ,IAAI;EAC7C,IAAI;IACF,MAAMC,GAAG,GAAG,MAAMR,KAAK,CAACS,GAAG,CAAC,YAAY,CAAC;IACzCF,QAAQ,CAAC;MACPG,IAAI,EAAET,QAAQ;MACdU,OAAO,EAAEH,GAAG,CAACI,IAAI,CAACC;IACpB,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdP,QAAQ,CAAC;MACPG,IAAI,EAAEN,UAAU;MAChBO,OAAO,EAAEG,KAAK,CAACC,QAAQ,CAACH;IAC1B,CAAC,CAAC;EACJ;AACF,CAAC;AAED,OAAO,MAAMI,SAAS,GAAIC,MAAM,IAAK,MAAMV,QAAQ,IAAI;EACrD,IAAI;IACF,MAAMC,GAAG,GAAG,MAAMR,KAAK,CAACkB,IAAI,CAAC,iBAAiB,EAAE;MAAED;IAAO,CAAC,CAAC;IAC3DV,QAAQ,CAAC;MACPG,IAAI,EAAER,WAAW;MACjBS,OAAO,EAAEH,GAAG,CAACI,IAAI,CAACC;IACpB,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdP,QAAQ,CAAC;MACPG,IAAI,EAAEN,UAAU;MAChBO,OAAO,EAAEG,KAAK,CAACC,QAAQ,CAACH;IAC1B,CAAC,CAAC;EACJ;AACF,CAAC;AAED,OAAO,MAAMO,cAAc,GAAIF,MAAM,IAAK,MAAMV,QAAQ,IAAI;EAC1D,IAAI;IACF,MAAMC,GAAG,GAAG,MAAMR,KAAK,CAACoB,MAAM,CAAC,sBAAsB,EAAE;MAAER,IAAI,EAAE;QAAEK;MAAO;IAAE,CAAC,CAAC;IAC5EV,QAAQ,CAAC;MACPG,IAAI,EAAEP,gBAAgB;MACtBQ,OAAO,EAAEM;IACX,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOH,KAAK,EAAE;IACdP,QAAQ,CAAC;MACPG,IAAI,EAAEN,UAAU;MAChBO,OAAO,EAAEG,KAAK,CAACC,QAAQ,CAACH;IAC1B,CAAC,CAAC;EACJ;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}