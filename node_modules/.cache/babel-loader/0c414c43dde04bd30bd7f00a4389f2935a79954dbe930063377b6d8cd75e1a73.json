{"ast":null,"code":"// import axios from 'axios';\n\n// export const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\n// export const LOGIN_FAIL = 'LOGIN_FAIL';\n// export const SIGNUP_SUCCESS = 'SIGNUP_SUCCESS';\n// export const SIGNUP_FAIL = 'SIGNUP_FAIL';\n// export const LOGOUT = 'LOGOUT';\n\n// const API_URL = 'http://localhost:4000/auth';\n\n// export const login = (userData) => async (dispatch) => {\n//   try {\n//     const response = await axios.post(`${API_URL}/login`, userData);\n//     const { token } = response.data;\n\n//     localStorage.setItem('token', token);\n\n//     dispatch({\n//       type: LOGIN_SUCCESS,\n//       payload: token,\n//     });\n//   } catch (error) {\n//     dispatch({\n//       type: LOGIN_FAIL,\n//       payload: error.response.data.errors,\n//     });\n//   }\n// };\n\n// export const logout = () => (dispatch) => {\n//   localStorage.removeItem('token');\n\n//   dispatch({\n//     type: LOGOUT,\n//   });\n// };\n\n// export const signup = (userData) => async (dispatch) => {\n//   try {\n//     console.log(`${API_URL}/auth/signup`)\n\n//     const res = await axios.post(`${API_URL}/signup`, userData);\n//     const { token } = res.data;\n//     localStorage.setItem('token', token);\n//     dispatch({ type: 'SIGNUP_SUCCESS', payload: token });\n//   } catch (err) {\n//     dispatch({ type: 'SIGNUP_FAIL', payload: err.response.data.errors });\n//   }\n// };\n\nimport axios from 'axios';\n\n// Action Types\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nexport const LOGIN_FAIL = 'LOGIN_FAIL';\nexport const SIGNUP_SUCCESS = 'SIGNUP_SUCCESS';\nexport const SIGNUP_FAIL = 'SIGNUP_FAIL';\nexport const LOGOUT = 'LOGOUT';\nconst API_URL = 'http://localhost:4000/auth';\n\n// Login Action\nexport const login = userData => async dispatch => {\n  try {\n    const response = await axios.post(`${API_URL}/login`, userData);\n    const {\n      token,\n      user\n    } = response.data; // Assuming 'user' is also returned\n\n    // Save token to local storage\n    localStorage.setItem('token', token);\n\n    // Dispatch login success with token and user data\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: {\n        token,\n        user\n      }\n    });\n\n    // Optional: Navigate after login\n    // navigate('/home');\n  } catch (error) {\n    var _error$response, _error$response$data;\n    dispatch({\n      type: LOGIN_FAIL,\n      payload: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.errors) || 'Login failed'\n    });\n  }\n};\n\n// Logout Action\nexport const logout = () => dispatch => {\n  localStorage.removeItem('token');\n  dispatch({\n    type: LOGOUT\n  });\n\n  // Optional: Navigate after logout\n  // navigate('/login');\n};\n\n// Signup Action\nexport const signup = userData => async dispatch => {\n  try {\n    const response = await axios.post(`${API_URL}/signup`, userData);\n    const {\n      token,\n      user\n    } = response.data; // Assuming 'user' is also returned\n\n    // Save token to local storage\n    localStorage.setItem('token', token);\n\n    // Dispatch signup success with token and user data\n    dispatch({\n      type: SIGNUP_SUCCESS,\n      payload: {\n        token,\n        user\n      }\n    });\n\n    // Optional: Navigate after signup\n    // navigate('/home');\n  } catch (error) {\n    var _error$response2, _error$response2$data;\n    dispatch({\n      type: SIGNUP_FAIL,\n      payload: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.errors) || 'Signup failed'\n    });\n  }\n};","map":{"version":3,"names":["axios","LOGIN_SUCCESS","LOGIN_FAIL","SIGNUP_SUCCESS","SIGNUP_FAIL","LOGOUT","API_URL","login","userData","dispatch","response","post","token","user","data","localStorage","setItem","type","payload","error","_error$response","_error$response$data","errors","logout","removeItem","signup","_error$response2","_error$response2$data"],"sources":["C:/Users/bhargavi_g/Documents/Nursery_live/frontend/src/redux/actions/authActions.jsx"],"sourcesContent":["\r\n// import axios from 'axios';\r\n\r\n// export const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\r\n// export const LOGIN_FAIL = 'LOGIN_FAIL';\r\n// export const SIGNUP_SUCCESS = 'SIGNUP_SUCCESS';\r\n// export const SIGNUP_FAIL = 'SIGNUP_FAIL';\r\n// export const LOGOUT = 'LOGOUT';\r\n\r\n// const API_URL = 'http://localhost:4000/auth';\r\n\r\n// export const login = (userData) => async (dispatch) => {\r\n//   try {\r\n//     const response = await axios.post(`${API_URL}/login`, userData);\r\n//     const { token } = response.data;\r\n\r\n//     localStorage.setItem('token', token);\r\n\r\n//     dispatch({\r\n//       type: LOGIN_SUCCESS,\r\n//       payload: token,\r\n//     });\r\n//   } catch (error) {\r\n//     dispatch({\r\n//       type: LOGIN_FAIL,\r\n//       payload: error.response.data.errors,\r\n//     });\r\n//   }\r\n// };\r\n\r\n\r\n// export const logout = () => (dispatch) => {\r\n//   localStorage.removeItem('token');\r\n\r\n//   dispatch({\r\n//     type: LOGOUT,\r\n//   });\r\n// };\r\n\r\n// export const signup = (userData) => async (dispatch) => {\r\n//   try {\r\n//     console.log(`${API_URL}/auth/signup`)\r\n\r\n//     const res = await axios.post(`${API_URL}/signup`, userData);\r\n//     const { token } = res.data;\r\n//     localStorage.setItem('token', token);\r\n//     dispatch({ type: 'SIGNUP_SUCCESS', payload: token });\r\n//   } catch (err) {\r\n//     dispatch({ type: 'SIGNUP_FAIL', payload: err.response.data.errors });\r\n//   }\r\n// };\r\n\r\nimport axios from 'axios';\r\n\r\n// Action Types\r\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\r\nexport const LOGIN_FAIL = 'LOGIN_FAIL';\r\nexport const SIGNUP_SUCCESS = 'SIGNUP_SUCCESS';\r\nexport const SIGNUP_FAIL = 'SIGNUP_FAIL';\r\nexport const LOGOUT = 'LOGOUT';\r\n\r\nconst API_URL = 'http://localhost:4000/auth';\r\n\r\n// Login Action\r\nexport const login = (userData) => async (dispatch) => {\r\n  try {\r\n    const response = await axios.post(`${API_URL}/login`, userData);\r\n    const { token, user } = response.data; // Assuming 'user' is also returned\r\n\r\n    // Save token to local storage\r\n    localStorage.setItem('token', token);\r\n\r\n    // Dispatch login success with token and user data\r\n    dispatch({\r\n      type: LOGIN_SUCCESS,\r\n      payload: { token, user },\r\n    });\r\n    \r\n    // Optional: Navigate after login\r\n    // navigate('/home');\r\n  } catch (error) {\r\n    dispatch({\r\n      type: LOGIN_FAIL,\r\n      payload: error.response?.data?.errors || 'Login failed',\r\n    });\r\n  }\r\n};\r\n\r\n// Logout Action\r\nexport const logout = () => (dispatch) => {\r\n  localStorage.removeItem('token');\r\n\r\n  dispatch({\r\n    type: LOGOUT,\r\n  });\r\n\r\n  // Optional: Navigate after logout\r\n  // navigate('/login');\r\n};\r\n\r\n// Signup Action\r\nexport const signup = (userData) => async (dispatch) => {\r\n  try {\r\n    const response = await axios.post(`${API_URL}/signup`, userData);\r\n    const { token, user } = response.data; // Assuming 'user' is also returned\r\n\r\n    // Save token to local storage\r\n    localStorage.setItem('token', token);\r\n\r\n    // Dispatch signup success with token and user data\r\n    dispatch({\r\n      type: SIGNUP_SUCCESS,\r\n      payload: { token, user },\r\n    });\r\n\r\n    // Optional: Navigate after signup\r\n    // navigate('/home');\r\n  } catch (error) {\r\n    dispatch({\r\n      type: SIGNUP_FAIL,\r\n      payload: error.response?.data?.errors || 'Signup failed',\r\n    });\r\n  }\r\n};\r\n\r\n"],"mappings":"AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,OAAO,MAAMC,aAAa,GAAG,eAAe;AAC5C,OAAO,MAAMC,UAAU,GAAG,YAAY;AACtC,OAAO,MAAMC,cAAc,GAAG,gBAAgB;AAC9C,OAAO,MAAMC,WAAW,GAAG,aAAa;AACxC,OAAO,MAAMC,MAAM,GAAG,QAAQ;AAE9B,MAAMC,OAAO,GAAG,4BAA4B;;AAE5C;AACA,OAAO,MAAMC,KAAK,GAAIC,QAAQ,IAAK,MAAOC,QAAQ,IAAK;EACrD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMV,KAAK,CAACW,IAAI,CAAE,GAAEL,OAAQ,QAAO,EAAEE,QAAQ,CAAC;IAC/D,MAAM;MAAEI,KAAK;MAAEC;IAAK,CAAC,GAAGH,QAAQ,CAACI,IAAI,CAAC,CAAC;;IAEvC;IACAC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEJ,KAAK,CAAC;;IAEpC;IACAH,QAAQ,CAAC;MACPQ,IAAI,EAAEhB,aAAa;MACnBiB,OAAO,EAAE;QAAEN,KAAK;QAAEC;MAAK;IACzB,CAAC,CAAC;;IAEF;IACA;EACF,CAAC,CAAC,OAAOM,KAAK,EAAE;IAAA,IAAAC,eAAA,EAAAC,oBAAA;IACdZ,QAAQ,CAAC;MACPQ,IAAI,EAAEf,UAAU;MAChBgB,OAAO,EAAE,EAAAE,eAAA,GAAAD,KAAK,CAACT,QAAQ,cAAAU,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBN,IAAI,cAAAO,oBAAA,uBAApBA,oBAAA,CAAsBC,MAAM,KAAI;IAC3C,CAAC,CAAC;EACJ;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,MAAM,GAAGA,CAAA,KAAOd,QAAQ,IAAK;EACxCM,YAAY,CAACS,UAAU,CAAC,OAAO,CAAC;EAEhCf,QAAQ,CAAC;IACPQ,IAAI,EAAEZ;EACR,CAAC,CAAC;;EAEF;EACA;AACF,CAAC;;AAED;AACA,OAAO,MAAMoB,MAAM,GAAIjB,QAAQ,IAAK,MAAOC,QAAQ,IAAK;EACtD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMV,KAAK,CAACW,IAAI,CAAE,GAAEL,OAAQ,SAAQ,EAAEE,QAAQ,CAAC;IAChE,MAAM;MAAEI,KAAK;MAAEC;IAAK,CAAC,GAAGH,QAAQ,CAACI,IAAI,CAAC,CAAC;;IAEvC;IACAC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEJ,KAAK,CAAC;;IAEpC;IACAH,QAAQ,CAAC;MACPQ,IAAI,EAAEd,cAAc;MACpBe,OAAO,EAAE;QAAEN,KAAK;QAAEC;MAAK;IACzB,CAAC,CAAC;;IAEF;IACA;EACF,CAAC,CAAC,OAAOM,KAAK,EAAE;IAAA,IAAAO,gBAAA,EAAAC,qBAAA;IACdlB,QAAQ,CAAC;MACPQ,IAAI,EAAEb,WAAW;MACjBc,OAAO,EAAE,EAAAQ,gBAAA,GAAAP,KAAK,CAACT,QAAQ,cAAAgB,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBZ,IAAI,cAAAa,qBAAA,uBAApBA,qBAAA,CAAsBL,MAAM,KAAI;IAC3C,CAAC,CAAC;EACJ;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}