{"ast":null,"code":"import axios from 'axios';\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nexport const LOGIN_FAIL = 'LOGIN_FAIL';\nexport const SIGNUP_SUCCESS = 'SIGNUP_SUCCESS';\nexport const SIGNUP_FAIL = 'SIGNUP_FAIL';\nexport const LOGOUT = 'LOGOUT';\nconst API_URL = 'http://localhost:4000/auth';\nexport const login = userData => async dispatch => {\n  try {\n    const response = await axios.post(`${API_URL}/login`, userData);\n    const {\n      token\n    } = response.data;\n    localStorage.setItem('token', token);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: token\n    });\n  } catch (error) {\n    dispatch({\n      type: LOGIN_FAIL,\n      payload: error.response.data.errors\n    });\n  }\n};\nexport const logout = () => dispatch => {\n  localStorage.removeItem('token');\n  dispatch({\n    type: LOGOUT\n  });\n};\nexport const signup = userData => async dispatch => {\n  try {\n    console.log(`${API_URL}/auth/signup`);\n    const res = await axios.post(`${API_URL}/signup`, userData);\n    const {\n      token\n    } = res.data;\n    localStorage.setItem('token', token);\n    dispatch({\n      type: 'SIGNUP_SUCCESS',\n      payload: token\n    });\n  } catch (err) {\n    dispatch({\n      type: 'SIGNUP_FAIL',\n      payload: err.response.data.errors\n    });\n  }\n};\n\n// import axios from 'axios';\n// import { jwtDecode } from 'jwt-decode'; // Use named import\n\n// // import jwt_decode from 'jwt-decode'; // To decode token if needed\n\n// export const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\n// export const LOGIN_FAIL = 'LOGIN_FAIL';\n// export const SIGNUP_SUCCESS = 'SIGNUP_SUCCESS';\n// export const SIGNUP_FAIL = 'SIGNUP_FAIL';\n// export const LOGOUT = 'LOGOUT';\n// export const LOAD_USER = 'LOAD_USER';\n\n// const API_URL = 'http://localhost:4000/auth';\n\n// // Login Action\n// export const login = (userData) => async (dispatch) => {\n//   try {\n//     const response = await axios.post(`${API_URL}/login`, userData);\n//     const { token } = response.data;\n\n//     // Store token in localStorage\n//     localStorage.setItem('token', token);\n\n//     // Decode the token to get user data (if token contains user info)\n//     const decodedUser = jwtDecode(token);\n\n//     dispatch({\n//       type: LOGIN_SUCCESS,\n//       payload: { token, user: decodedUser },\n//     });\n//   } catch (error) {\n//     dispatch({\n//       type: LOGIN_FAIL,\n//       payload: error.response?.data?.errors || 'Login failed',\n//     });\n//   }\n// };\n\n// // Signup Action\n// export const signup = (userData) => async (dispatch) => {\n//   try {\n//     const response = await axios.post(`${API_URL}/signup`, userData);\n//     const { token } = response.data;\n\n//     // Store token in localStorage\n//     localStorage.setItem('token', token);\n\n//     // Decode the token to get user data\n//     const decodedUser = jwtDecode(token);\n\n//     dispatch({\n//       type: SIGNUP_SUCCESS,\n//       payload: { token, user: decodedUser },\n//     });\n//   } catch (error) {\n//     dispatch({\n//       type: SIGNUP_FAIL,\n//       payload: error.response?.data?.errors || 'Signup failed',\n//     });\n//   }\n// };\n\n// // Logout Action\n// export const logout = () => (dispatch) => {\n//   localStorage.removeItem('token');\n\n//   dispatch({\n//     type: LOGOUT,\n//   });\n// };\n\n// // Load User Action: Auto-login on app load if token exists\n// export const loadUser = () => (dispatch) => {\n//   const token = localStorage.getItem('token');\n\n//   if (token) {\n//     try {\n//       // Decode token to get user info\n//       const decodedUser = jwtDecode(token);\n\n//       dispatch({\n//         type: LOAD_USER,\n//         payload: { token, user: decodedUser },\n//       });\n//     } catch (error) {\n//       dispatch(logout());\n//     }\n//   }\n// };","map":{"version":3,"names":["axios","LOGIN_SUCCESS","LOGIN_FAIL","SIGNUP_SUCCESS","SIGNUP_FAIL","LOGOUT","API_URL","login","userData","dispatch","response","post","token","data","localStorage","setItem","type","payload","error","errors","logout","removeItem","signup","console","log","res","err"],"sources":["C:/Users/bhargavi_g/Documents/Nursery_live/frontend/src/redux/actions/authActions.jsx"],"sourcesContent":["\r\nimport axios from 'axios';\r\n\r\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\r\nexport const LOGIN_FAIL = 'LOGIN_FAIL';\r\nexport const SIGNUP_SUCCESS = 'SIGNUP_SUCCESS';\r\nexport const SIGNUP_FAIL = 'SIGNUP_FAIL';\r\nexport const LOGOUT = 'LOGOUT';\r\n\r\nconst API_URL = 'http://localhost:4000/auth';\r\n\r\nexport const login = (userData) => async (dispatch) => {\r\n  try {\r\n    const response = await axios.post(`${API_URL}/login`, userData);\r\n    const { token } = response.data;\r\n\r\n    localStorage.setItem('token', token);\r\n\r\n    dispatch({\r\n      type: LOGIN_SUCCESS,\r\n      payload: token,\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: LOGIN_FAIL,\r\n      payload: error.response.data.errors,\r\n    });\r\n  }\r\n};\r\n\r\n\r\nexport const logout = () => (dispatch) => {\r\n  localStorage.removeItem('token');\r\n\r\n  dispatch({\r\n    type: LOGOUT,\r\n  });\r\n};\r\n\r\nexport const signup = (userData) => async (dispatch) => {\r\n  try {\r\n    console.log(`${API_URL}/auth/signup`)\r\n\r\n    const res = await axios.post(`${API_URL}/signup`, userData);\r\n    const { token } = res.data;\r\n    localStorage.setItem('token', token);\r\n    dispatch({ type: 'SIGNUP_SUCCESS', payload: token });\r\n  } catch (err) {\r\n    dispatch({ type: 'SIGNUP_FAIL', payload: err.response.data.errors });\r\n  }\r\n};\r\n\r\n\r\n// import axios from 'axios';\r\n// import { jwtDecode } from 'jwt-decode'; // Use named import\r\n\r\n// // import jwt_decode from 'jwt-decode'; // To decode token if needed\r\n\r\n// export const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\r\n// export const LOGIN_FAIL = 'LOGIN_FAIL';\r\n// export const SIGNUP_SUCCESS = 'SIGNUP_SUCCESS';\r\n// export const SIGNUP_FAIL = 'SIGNUP_FAIL';\r\n// export const LOGOUT = 'LOGOUT';\r\n// export const LOAD_USER = 'LOAD_USER';\r\n\r\n// const API_URL = 'http://localhost:4000/auth';\r\n\r\n// // Login Action\r\n// export const login = (userData) => async (dispatch) => {\r\n//   try {\r\n//     const response = await axios.post(`${API_URL}/login`, userData);\r\n//     const { token } = response.data;\r\n\r\n//     // Store token in localStorage\r\n//     localStorage.setItem('token', token);\r\n\r\n//     // Decode the token to get user data (if token contains user info)\r\n//     const decodedUser = jwtDecode(token);\r\n\r\n//     dispatch({\r\n//       type: LOGIN_SUCCESS,\r\n//       payload: { token, user: decodedUser },\r\n//     });\r\n//   } catch (error) {\r\n//     dispatch({\r\n//       type: LOGIN_FAIL,\r\n//       payload: error.response?.data?.errors || 'Login failed',\r\n//     });\r\n//   }\r\n// };\r\n\r\n// // Signup Action\r\n// export const signup = (userData) => async (dispatch) => {\r\n//   try {\r\n//     const response = await axios.post(`${API_URL}/signup`, userData);\r\n//     const { token } = response.data;\r\n\r\n//     // Store token in localStorage\r\n//     localStorage.setItem('token', token);\r\n\r\n//     // Decode the token to get user data\r\n//     const decodedUser = jwtDecode(token);\r\n\r\n//     dispatch({\r\n//       type: SIGNUP_SUCCESS,\r\n//       payload: { token, user: decodedUser },\r\n//     });\r\n//   } catch (error) {\r\n//     dispatch({\r\n//       type: SIGNUP_FAIL,\r\n//       payload: error.response?.data?.errors || 'Signup failed',\r\n//     });\r\n//   }\r\n// };\r\n\r\n// // Logout Action\r\n// export const logout = () => (dispatch) => {\r\n//   localStorage.removeItem('token');\r\n  \r\n//   dispatch({\r\n//     type: LOGOUT,\r\n//   });\r\n// };\r\n\r\n// // Load User Action: Auto-login on app load if token exists\r\n// export const loadUser = () => (dispatch) => {\r\n//   const token = localStorage.getItem('token');\r\n\r\n//   if (token) {\r\n//     try {\r\n//       // Decode token to get user info\r\n//       const decodedUser = jwtDecode(token);\r\n\r\n//       dispatch({\r\n//         type: LOAD_USER,\r\n//         payload: { token, user: decodedUser },\r\n//       });\r\n//     } catch (error) {\r\n//       dispatch(logout());\r\n//     }\r\n//   }\r\n// };\r\n"],"mappings":"AACA,OAAOA,KAAK,MAAM,OAAO;AAEzB,OAAO,MAAMC,aAAa,GAAG,eAAe;AAC5C,OAAO,MAAMC,UAAU,GAAG,YAAY;AACtC,OAAO,MAAMC,cAAc,GAAG,gBAAgB;AAC9C,OAAO,MAAMC,WAAW,GAAG,aAAa;AACxC,OAAO,MAAMC,MAAM,GAAG,QAAQ;AAE9B,MAAMC,OAAO,GAAG,4BAA4B;AAE5C,OAAO,MAAMC,KAAK,GAAIC,QAAQ,IAAK,MAAOC,QAAQ,IAAK;EACrD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMV,KAAK,CAACW,IAAI,CAAE,GAAEL,OAAQ,QAAO,EAAEE,QAAQ,CAAC;IAC/D,MAAM;MAAEI;IAAM,CAAC,GAAGF,QAAQ,CAACG,IAAI;IAE/BC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEH,KAAK,CAAC;IAEpCH,QAAQ,CAAC;MACPO,IAAI,EAAEf,aAAa;MACnBgB,OAAO,EAAEL;IACX,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOM,KAAK,EAAE;IACdT,QAAQ,CAAC;MACPO,IAAI,EAAEd,UAAU;MAChBe,OAAO,EAAEC,KAAK,CAACR,QAAQ,CAACG,IAAI,CAACM;IAC/B,CAAC,CAAC;EACJ;AACF,CAAC;AAGD,OAAO,MAAMC,MAAM,GAAGA,CAAA,KAAOX,QAAQ,IAAK;EACxCK,YAAY,CAACO,UAAU,CAAC,OAAO,CAAC;EAEhCZ,QAAQ,CAAC;IACPO,IAAI,EAAEX;EACR,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAMiB,MAAM,GAAId,QAAQ,IAAK,MAAOC,QAAQ,IAAK;EACtD,IAAI;IACFc,OAAO,CAACC,GAAG,CAAE,GAAElB,OAAQ,cAAa,CAAC;IAErC,MAAMmB,GAAG,GAAG,MAAMzB,KAAK,CAACW,IAAI,CAAE,GAAEL,OAAQ,SAAQ,EAAEE,QAAQ,CAAC;IAC3D,MAAM;MAAEI;IAAM,CAAC,GAAGa,GAAG,CAACZ,IAAI;IAC1BC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEH,KAAK,CAAC;IACpCH,QAAQ,CAAC;MAAEO,IAAI,EAAE,gBAAgB;MAAEC,OAAO,EAAEL;IAAM,CAAC,CAAC;EACtD,CAAC,CAAC,OAAOc,GAAG,EAAE;IACZjB,QAAQ,CAAC;MAAEO,IAAI,EAAE,aAAa;MAAEC,OAAO,EAAES,GAAG,CAAChB,QAAQ,CAACG,IAAI,CAACM;IAAO,CAAC,CAAC;EACtE;AACF,CAAC;;AAGD;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}