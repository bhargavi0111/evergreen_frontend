{"ast":null,"code":"// import axios from 'axios';\n\n// export const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\n// export const LOGIN_FAIL = 'LOGIN_FAIL';\n// export const SIGNUP_SUCCESS = 'SIGNUP_SUCCESS';\n// export const SIGNUP_FAIL = 'SIGNUP_FAIL';\n// export const LOGOUT = 'LOGOUT';\n\n// const API_URL = 'http://localhost:4000/auth';\n\n// export const login = (userData) => async (dispatch) => {\n//   try {\n//     const response = await axios.post(`${API_URL}/login`, userData);\n//     const { token } = response.data;\n\n//     localStorage.setItem('token', token);\n\n//     dispatch({\n//       type: LOGIN_SUCCESS,\n//       payload: token,\n//     });\n//   } catch (error) {\n//     dispatch({\n//       type: LOGIN_FAIL,\n//       payload: error.response.data.errors,\n//     });\n//   }\n// };\n\n// export const logout = () => (dispatch) => {\n//   localStorage.removeItem('token');\n\n//   dispatch({\n//     type: LOGOUT,\n//   });\n// };\n\n// export const signup = (userData) => async (dispatch) => {\n//   try {\n//     console.log(`${API_URL}/auth/signup`)\n\n//     const res = await axios.post(`${API_URL}/signup`, userData);\n//     const { token } = res.data;\n//     localStorage.setItem('token', token);\n//     dispatch({ type: 'SIGNUP_SUCCESS', payload: token });\n//   } catch (err) {\n//     dispatch({ type: 'SIGNUP_FAIL', payload: err.response.data.errors });\n//   }\n// };\n\nimport axios from 'axios';\nimport { jwtDecode } from 'jwt-decode'; // Use named import\n\n// import jwt_decode from 'jwt-decode'; // To decode token if needed\n\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nexport const LOGIN_FAIL = 'LOGIN_FAIL';\nexport const SIGNUP_SUCCESS = 'SIGNUP_SUCCESS';\nexport const SIGNUP_FAIL = 'SIGNUP_FAIL';\nexport const LOGOUT = 'LOGOUT';\nexport const LOAD_USER = 'LOAD_USER';\nconst API_URL = 'http://localhost:4000/auth';\n\n// Login Action\nexport const login = userData => async dispatch => {\n  try {\n    const response = await axios.post(`${API_URL}/login`, userData);\n    const {\n      token\n    } = response.data;\n\n    // Store token in localStorage\n    localStorage.setItem('token', token);\n\n    // Decode the token to get user data (if token contains user info)\n    const decodedUser = jwtecode(token);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: {\n        token,\n        user: decodedUser\n      }\n    });\n  } catch (error) {\n    var _error$response, _error$response$data;\n    dispatch({\n      type: LOGIN_FAIL,\n      payload: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.errors) || 'Login failed'\n    });\n  }\n};\n\n// Signup Action\nexport const signup = userData => async dispatch => {\n  try {\n    const response = await axios.post(`${API_URL}/signup`, userData);\n    const {\n      token\n    } = response.data;\n\n    // Store token in localStorage\n    localStorage.setItem('token', token);\n\n    // Decode the token to get user data\n    const decodedUser = jwt_decode(token);\n    dispatch({\n      type: SIGNUP_SUCCESS,\n      payload: {\n        token,\n        user: decodedUser\n      }\n    });\n  } catch (error) {\n    var _error$response2, _error$response2$data;\n    dispatch({\n      type: SIGNUP_FAIL,\n      payload: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.errors) || 'Signup failed'\n    });\n  }\n};\n\n// Logout Action\nexport const logout = () => dispatch => {\n  localStorage.removeItem('token');\n  dispatch({\n    type: LOGOUT\n  });\n};\n\n// Load User Action: Auto-login on app load if token exists\nexport const loadUser = () => dispatch => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    try {\n      // Decode token to get user info\n      const decodedUser = jwt_decode(token);\n      dispatch({\n        type: LOAD_USER,\n        payload: {\n          token,\n          user: decodedUser\n        }\n      });\n    } catch (error) {\n      dispatch(logout());\n    }\n  }\n};","map":{"version":3,"names":["axios","jwtDecode","LOGIN_SUCCESS","LOGIN_FAIL","SIGNUP_SUCCESS","SIGNUP_FAIL","LOGOUT","LOAD_USER","API_URL","login","userData","dispatch","response","post","token","data","localStorage","setItem","decodedUser","jwtecode","type","payload","user","error","_error$response","_error$response$data","errors","signup","jwt_decode","_error$response2","_error$response2$data","logout","removeItem","loadUser","getItem"],"sources":["C:/Users/bhargavi_g/Documents/Nursery_live/frontend/src/redux/actions/authActions.jsx"],"sourcesContent":["\r\n// import axios from 'axios';\r\n\r\n// export const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\r\n// export const LOGIN_FAIL = 'LOGIN_FAIL';\r\n// export const SIGNUP_SUCCESS = 'SIGNUP_SUCCESS';\r\n// export const SIGNUP_FAIL = 'SIGNUP_FAIL';\r\n// export const LOGOUT = 'LOGOUT';\r\n\r\n// const API_URL = 'http://localhost:4000/auth';\r\n\r\n// export const login = (userData) => async (dispatch) => {\r\n//   try {\r\n//     const response = await axios.post(`${API_URL}/login`, userData);\r\n//     const { token } = response.data;\r\n\r\n//     localStorage.setItem('token', token);\r\n\r\n//     dispatch({\r\n//       type: LOGIN_SUCCESS,\r\n//       payload: token,\r\n//     });\r\n//   } catch (error) {\r\n//     dispatch({\r\n//       type: LOGIN_FAIL,\r\n//       payload: error.response.data.errors,\r\n//     });\r\n//   }\r\n// };\r\n\r\n\r\n// export const logout = () => (dispatch) => {\r\n//   localStorage.removeItem('token');\r\n\r\n//   dispatch({\r\n//     type: LOGOUT,\r\n//   });\r\n// };\r\n\r\n// export const signup = (userData) => async (dispatch) => {\r\n//   try {\r\n//     console.log(`${API_URL}/auth/signup`)\r\n\r\n//     const res = await axios.post(`${API_URL}/signup`, userData);\r\n//     const { token } = res.data;\r\n//     localStorage.setItem('token', token);\r\n//     dispatch({ type: 'SIGNUP_SUCCESS', payload: token });\r\n//   } catch (err) {\r\n//     dispatch({ type: 'SIGNUP_FAIL', payload: err.response.data.errors });\r\n//   }\r\n// };\r\n\r\n\r\nimport axios from 'axios';\r\nimport { jwtDecode } from 'jwt-decode'; // Use named import\r\n\r\n// import jwt_decode from 'jwt-decode'; // To decode token if needed\r\n\r\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\r\nexport const LOGIN_FAIL = 'LOGIN_FAIL';\r\nexport const SIGNUP_SUCCESS = 'SIGNUP_SUCCESS';\r\nexport const SIGNUP_FAIL = 'SIGNUP_FAIL';\r\nexport const LOGOUT = 'LOGOUT';\r\nexport const LOAD_USER = 'LOAD_USER';\r\n\r\nconst API_URL = 'http://localhost:4000/auth';\r\n\r\n// Login Action\r\nexport const login = (userData) => async (dispatch) => {\r\n  try {\r\n    const response = await axios.post(`${API_URL}/login`, userData);\r\n    const { token } = response.data;\r\n\r\n    // Store token in localStorage\r\n    localStorage.setItem('token', token);\r\n\r\n    // Decode the token to get user data (if token contains user info)\r\n    const decodedUser = jwtecode(token);\r\n\r\n    dispatch({\r\n      type: LOGIN_SUCCESS,\r\n      payload: { token, user: decodedUser },\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: LOGIN_FAIL,\r\n      payload: error.response?.data?.errors || 'Login failed',\r\n    });\r\n  }\r\n};\r\n\r\n// Signup Action\r\nexport const signup = (userData) => async (dispatch) => {\r\n  try {\r\n    const response = await axios.post(`${API_URL}/signup`, userData);\r\n    const { token } = response.data;\r\n\r\n    // Store token in localStorage\r\n    localStorage.setItem('token', token);\r\n\r\n    // Decode the token to get user data\r\n    const decodedUser = jwt_decode(token);\r\n\r\n    dispatch({\r\n      type: SIGNUP_SUCCESS,\r\n      payload: { token, user: decodedUser },\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: SIGNUP_FAIL,\r\n      payload: error.response?.data?.errors || 'Signup failed',\r\n    });\r\n  }\r\n};\r\n\r\n// Logout Action\r\nexport const logout = () => (dispatch) => {\r\n  localStorage.removeItem('token');\r\n  \r\n  dispatch({\r\n    type: LOGOUT,\r\n  });\r\n};\r\n\r\n// Load User Action: Auto-login on app load if token exists\r\nexport const loadUser = () => (dispatch) => {\r\n  const token = localStorage.getItem('token');\r\n\r\n  if (token) {\r\n    try {\r\n      // Decode token to get user info\r\n      const decodedUser = jwt_decode(token);\r\n\r\n      dispatch({\r\n        type: LOAD_USER,\r\n        payload: { token, user: decodedUser },\r\n      });\r\n    } catch (error) {\r\n      dispatch(logout());\r\n    }\r\n  }\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}