{"ast":null,"code":"// // src/redux/types/cartTypes.js\n\n// // src/redux/actions/cartActions.js\n// import axios from 'axios';\n// export const FETCH_CART_ITEMS = 'FETCH_CART_ITEMS';\n// export const ADD_TO_CART = 'ADD_TO_CART';\n// export const REMOVE_FROM_CART = 'REMOVE_FROM_CART';\n// export const UPDATE_CART_QUANTITY = 'UPDATE_CART_QUANTITY';\n\n// export const fetchCartItems = (userId) => async (dispatch) => {\n//   try {\n//     const response = await axios.get(`/cart/addtocart/${userId}`);\n//     dispatch({\n//       type: FETCH_CART_ITEMS,\n//       payload: response.data,\n//     });\n//   } catch (error) {\n//     console.error('Error fetching cart items:', error);\n//   }\n// };\n\n// export const addToCart = (product) => async (dispatch, getState) => {\n//   try {\n//     const { user } = getState().auth; // Assuming you have an auth reducer with user info\n//     if (!user) {\n//       throw new Error('User not authenticated');\n//     }\n\n//     const response = await axios.post('/api/addtocart', {\n//       userId: user._id,\n//       productId: product._id,\n//       quantity: 1, // You can modify this if you want to allow adding multiple quantities\n//     });\n\n//     dispatch({\n//       type: ADD_TO_CART,\n//       payload: {\n//         ...product,\n//         quantity: 1,\n//       },\n//     });\n\n//     // Optionally, you can fetch the updated cart after adding an item\n//     dispatch(fetchCartItems(user._id));\n//   } catch (error) {\n//     console.error('Error adding to cart:', error);\n//     // Handle error (e.g., show an error message to the user)\n//   }\n// };\n// src/redux/cartActions.js\nimport axios from 'axios';\n\n// Action Types\nexport const ADD_TO_CART = 'ADD_TO_CART';\nexport const REMOVE_FROM_CART = 'REMOVE_FROM_CART';\nexport const GET_CART = 'GET_CART';\nexport const CART_ERROR = 'CART_ERROR';\n\n// Add to Cart\n\nexport const addToCart = itemId => async (dispatch, getState) => {\n  try {\n    const {\n      data\n    } = await axios.post('/api/cart/addtocart', {\n      itemId\n    }, {\n      headers: {\n        Authorization: `Bearer ${getState().auth.token}`\n      }\n    });\n    dispatch({\n      type: ADD_TO_CART,\n      payload: data.cart\n    });\n  } catch (error) {\n    dispatch({\n      type: CART_ERROR,\n      payload: error.response.data\n    });\n  }\n};\n\n// Remove from Cart\nexport const removeFromCart = itemId => async (dispatch, getState) => {\n  try {\n    const {\n      data\n    } = await axios.delete('/api/cart/removefromcart', {\n      headers: {\n        Authorization: `Bearer ${getState().auth.token}`\n      },\n      data: {\n        itemId\n      }\n    });\n    dispatch({\n      type: REMOVE_FROM_CART,\n      payload: itemId\n    });\n  } catch (error) {\n    dispatch({\n      type: CART_ERROR,\n      payload: error.response.data\n    });\n  }\n};\n\n// Get Cart\nexport const getCart = () => async (dispatch, getState) => {\n  try {\n    const {\n      data\n    } = await axios.get('/api/cart/getcart', {\n      headers: {\n        Authorization: `Bearer ${getState().auth.token}`\n      }\n    });\n    dispatch({\n      type: GET_CART,\n      payload: data.cart\n    });\n  } catch (error) {\n    dispatch({\n      type: CART_ERROR,\n      payload: error.response.data\n    });\n  }\n};","map":{"version":3,"names":["axios","ADD_TO_CART","REMOVE_FROM_CART","GET_CART","CART_ERROR","addToCart","itemId","dispatch","getState","data","post","headers","Authorization","auth","token","type","payload","cart","error","response","removeFromCart","delete","getCart","get"],"sources":["C:/Users/bhargavi_g/Documents/Nursery_live/frontend/src/redux/actions/cartActions.jsx"],"sourcesContent":["// // src/redux/types/cartTypes.js\r\n\r\n// // src/redux/actions/cartActions.js\r\n// import axios from 'axios';\r\n// export const FETCH_CART_ITEMS = 'FETCH_CART_ITEMS';\r\n// export const ADD_TO_CART = 'ADD_TO_CART';\r\n// export const REMOVE_FROM_CART = 'REMOVE_FROM_CART';\r\n// export const UPDATE_CART_QUANTITY = 'UPDATE_CART_QUANTITY';\r\n\r\n\r\n\r\n// export const fetchCartItems = (userId) => async (dispatch) => {\r\n//   try {\r\n//     const response = await axios.get(`/cart/addtocart/${userId}`);\r\n//     dispatch({\r\n//       type: FETCH_CART_ITEMS,\r\n//       payload: response.data,\r\n//     });\r\n//   } catch (error) {\r\n//     console.error('Error fetching cart items:', error);\r\n//   }\r\n// };\r\n\r\n// export const addToCart = (product) => async (dispatch, getState) => {\r\n//   try {\r\n//     const { user } = getState().auth; // Assuming you have an auth reducer with user info\r\n//     if (!user) {\r\n//       throw new Error('User not authenticated');\r\n//     }\r\n\r\n//     const response = await axios.post('/api/addtocart', {\r\n//       userId: user._id,\r\n//       productId: product._id,\r\n//       quantity: 1, // You can modify this if you want to allow adding multiple quantities\r\n//     });\r\n\r\n//     dispatch({\r\n//       type: ADD_TO_CART,\r\n//       payload: {\r\n//         ...product,\r\n//         quantity: 1,\r\n//       },\r\n//     });\r\n\r\n//     // Optionally, you can fetch the updated cart after adding an item\r\n//     dispatch(fetchCartItems(user._id));\r\n//   } catch (error) {\r\n//     console.error('Error adding to cart:', error);\r\n//     // Handle error (e.g., show an error message to the user)\r\n//   }\r\n// };\r\n// src/redux/cartActions.js\r\nimport axios from 'axios';\r\n\r\n// Action Types\r\nexport const ADD_TO_CART = 'ADD_TO_CART';\r\nexport const REMOVE_FROM_CART = 'REMOVE_FROM_CART';\r\nexport const GET_CART = 'GET_CART';\r\nexport const CART_ERROR = 'CART_ERROR';\r\n\r\n// Add to Cart\r\n\r\n\r\nexport const addToCart = (itemId) => async (dispatch, getState) => {\r\n  try {\r\n    const { data } = await axios.post('/api/cart/addtocart', { itemId }, {\r\n      headers: { Authorization: `Bearer ${getState().auth.token}` }\r\n    });\r\n    dispatch({ type: ADD_TO_CART, payload: data.cart });\r\n  } catch (error) {\r\n    dispatch({ type: CART_ERROR, payload: error.response.data });\r\n  }\r\n};\r\n\r\n// Remove from Cart\r\nexport const removeFromCart = (itemId) => async (dispatch, getState) => {\r\n  try {\r\n    const { data } = await axios.delete('/api/cart/removefromcart', {\r\n      headers: { Authorization: `Bearer ${getState().auth.token}` },\r\n      data: { itemId }\r\n    });\r\n    dispatch({ type: REMOVE_FROM_CART, payload: itemId });\r\n  } catch (error) {\r\n    dispatch({ type: CART_ERROR, payload: error.response.data });\r\n  }\r\n};\r\n\r\n// Get Cart\r\nexport const getCart = () => async (dispatch, getState) => {\r\n  try {\r\n    const { data } = await axios.get('/api/cart/getcart', {\r\n      headers: { Authorization: `Bearer ${getState().auth.token}` }\r\n    });\r\n    dispatch({ type: GET_CART, payload: data.cart });\r\n  } catch (error) {\r\n    dispatch({ type: CART_ERROR, payload: error.response.data });\r\n  }\r\n};\r\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,OAAO,MAAMC,WAAW,GAAG,aAAa;AACxC,OAAO,MAAMC,gBAAgB,GAAG,kBAAkB;AAClD,OAAO,MAAMC,QAAQ,GAAG,UAAU;AAClC,OAAO,MAAMC,UAAU,GAAG,YAAY;;AAEtC;;AAGA,OAAO,MAAMC,SAAS,GAAIC,MAAM,IAAK,OAAOC,QAAQ,EAAEC,QAAQ,KAAK;EACjE,IAAI;IACF,MAAM;MAAEC;IAAK,CAAC,GAAG,MAAMT,KAAK,CAACU,IAAI,CAAC,qBAAqB,EAAE;MAAEJ;IAAO,CAAC,EAAE;MACnEK,OAAO,EAAE;QAAEC,aAAa,EAAG,UAASJ,QAAQ,CAAC,CAAC,CAACK,IAAI,CAACC,KAAM;MAAE;IAC9D,CAAC,CAAC;IACFP,QAAQ,CAAC;MAAEQ,IAAI,EAAEd,WAAW;MAAEe,OAAO,EAAEP,IAAI,CAACQ;IAAK,CAAC,CAAC;EACrD,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdX,QAAQ,CAAC;MAAEQ,IAAI,EAAEX,UAAU;MAAEY,OAAO,EAAEE,KAAK,CAACC,QAAQ,CAACV;IAAK,CAAC,CAAC;EAC9D;AACF,CAAC;;AAED;AACA,OAAO,MAAMW,cAAc,GAAId,MAAM,IAAK,OAAOC,QAAQ,EAAEC,QAAQ,KAAK;EACtE,IAAI;IACF,MAAM;MAAEC;IAAK,CAAC,GAAG,MAAMT,KAAK,CAACqB,MAAM,CAAC,0BAA0B,EAAE;MAC9DV,OAAO,EAAE;QAAEC,aAAa,EAAG,UAASJ,QAAQ,CAAC,CAAC,CAACK,IAAI,CAACC,KAAM;MAAE,CAAC;MAC7DL,IAAI,EAAE;QAAEH;MAAO;IACjB,CAAC,CAAC;IACFC,QAAQ,CAAC;MAAEQ,IAAI,EAAEb,gBAAgB;MAAEc,OAAO,EAAEV;IAAO,CAAC,CAAC;EACvD,CAAC,CAAC,OAAOY,KAAK,EAAE;IACdX,QAAQ,CAAC;MAAEQ,IAAI,EAAEX,UAAU;MAAEY,OAAO,EAAEE,KAAK,CAACC,QAAQ,CAACV;IAAK,CAAC,CAAC;EAC9D;AACF,CAAC;;AAED;AACA,OAAO,MAAMa,OAAO,GAAGA,CAAA,KAAM,OAAOf,QAAQ,EAAEC,QAAQ,KAAK;EACzD,IAAI;IACF,MAAM;MAAEC;IAAK,CAAC,GAAG,MAAMT,KAAK,CAACuB,GAAG,CAAC,mBAAmB,EAAE;MACpDZ,OAAO,EAAE;QAAEC,aAAa,EAAG,UAASJ,QAAQ,CAAC,CAAC,CAACK,IAAI,CAACC,KAAM;MAAE;IAC9D,CAAC,CAAC;IACFP,QAAQ,CAAC;MAAEQ,IAAI,EAAEZ,QAAQ;MAAEa,OAAO,EAAEP,IAAI,CAACQ;IAAK,CAAC,CAAC;EAClD,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdX,QAAQ,CAAC;MAAEQ,IAAI,EAAEX,UAAU;MAAEY,OAAO,EAAEE,KAAK,CAACC,QAAQ,CAACV;IAAK,CAAC,CAAC;EAC9D;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}