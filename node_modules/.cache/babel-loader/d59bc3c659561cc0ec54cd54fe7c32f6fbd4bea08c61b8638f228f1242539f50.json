{"ast":null,"code":"import axios from 'axios';\nconst initialState = {\n  products: [] // Ensure products is initialized as an empty array\n};\n\nexport const fetchAllProducts = () => async dispatch => {\n  dispatch({\n    type: 'FETCH_PRODUCTS_REQUEST'\n  });\n  try {\n    const response = await axios.get('http://localhost:4000/allproducts');\n    console.log(\"fetchAllProducts success\", response.data);\n    dispatch({\n      type: 'FETCH_PRODUCTS_SUCCESS',\n      payload: response.data\n    });\n  } catch (error) {\n    dispatch({\n      type: 'FETCH_PRODUCTS_FAILURE',\n      payload: error.message\n    });\n  }\n};\n\n// export const fetchProductsByCategory = (category) => async (dispatch) => {\n//     try {\n//       dispatch({ type: 'FETCH_PRODUCTS_REQUEST' });\n//       const response = await axios.get(`http://localhost:4000/allproducts/${category}`);\n//       console.log(\"category\",response.data)\n//       dispatch({\n//         type: 'FETCH_PRODUCTS_SUCCESS',\n//         payload: response.data,\n//       });\n//     } catch (error) {\n//       dispatch({\n//         type: 'FETCH_PRODUCTS_FAILURE',\n//         payload: error.message,\n//       });\n//     }\n//   };\nexport const fetchProductsByCategory = category => async dispatch => {\n  console.log(\"Dispatching fetchProductsByCategory with category:\", category); // Debug log\n  try {\n    dispatch({\n      type: 'FETCH_PRODUCTS_REQUEST'\n    });\n    const response = await axios.get(`http://localhost:4000/allproducts/${category}`);\n    console.log(\"Category fetch success:\", response.data); // Debug log\n    dispatch({\n      type: 'FETCH_PRODUCTS_SUCCESS',\n      payload: response.data\n    });\n  } catch (error) {\n    console.error(\"Category fetch error:\", error); // Debug log\n    dispatch({\n      type: 'FETCH_PRODUCTS_FAILURE',\n      payload: error.message\n    });\n  }\n};","map":{"version":3,"names":["axios","initialState","products","fetchAllProducts","dispatch","type","response","get","console","log","data","payload","error","message","fetchProductsByCategory","category"],"sources":["C:/Users/bhargavi_g/Documents/Nursery_live/frontend/src/redux/actions/shopActions.jsx"],"sourcesContent":["import axios from 'axios';\r\nconst initialState = {\r\n  products: [], // Ensure products is initialized as an empty array\r\n};\r\n\r\n\r\nexport const fetchAllProducts = () => async (dispatch) => {\r\n    dispatch({ type: 'FETCH_PRODUCTS_REQUEST' });\r\n    try {\r\n      const response = await axios.get('http://localhost:4000/allproducts');\r\n      console.log(\"fetchAllProducts success\",response.data)\r\n      dispatch({ type: 'FETCH_PRODUCTS_SUCCESS', payload: response.data });\r\n    } catch (error) {\r\n      dispatch({ type: 'FETCH_PRODUCTS_FAILURE', payload: error.message });\r\n    }\r\n  };\r\n\r\n// export const fetchProductsByCategory = (category) => async (dispatch) => {\r\n//     try {\r\n//       dispatch({ type: 'FETCH_PRODUCTS_REQUEST' });\r\n//       const response = await axios.get(`http://localhost:4000/allproducts/${category}`);\r\n//       console.log(\"category\",response.data)\r\n//       dispatch({\r\n//         type: 'FETCH_PRODUCTS_SUCCESS',\r\n//         payload: response.data,\r\n//       });\r\n//     } catch (error) {\r\n//       dispatch({\r\n//         type: 'FETCH_PRODUCTS_FAILURE',\r\n//         payload: error.message,\r\n//       });\r\n//     }\r\n//   };\r\nexport const fetchProductsByCategory = (category) => async (dispatch) => {\r\n    console.log(\"Dispatching fetchProductsByCategory with category:\", category); // Debug log\r\n    try {\r\n      dispatch({ type: 'FETCH_PRODUCTS_REQUEST' });\r\n      const response = await axios.get(`http://localhost:4000/allproducts/${category}`);\r\n      console.log(\"Category fetch success:\", response.data); // Debug log\r\n      dispatch({\r\n        type: 'FETCH_PRODUCTS_SUCCESS',\r\n        payload: response.data,\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Category fetch error:\", error); // Debug log\r\n      dispatch({\r\n        type: 'FETCH_PRODUCTS_FAILURE',\r\n        payload: error.message,\r\n      });\r\n    }\r\n  };\r\n  "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,MAAMC,YAAY,GAAG;EACnBC,QAAQ,EAAE,EAAE,CAAE;AAChB,CAAC;;AAGD,OAAO,MAAMC,gBAAgB,GAAGA,CAAA,KAAM,MAAOC,QAAQ,IAAK;EACtDA,QAAQ,CAAC;IAAEC,IAAI,EAAE;EAAyB,CAAC,CAAC;EAC5C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMN,KAAK,CAACO,GAAG,CAAC,mCAAmC,CAAC;IACrEC,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAACH,QAAQ,CAACI,IAAI,CAAC;IACrDN,QAAQ,CAAC;MAAEC,IAAI,EAAE,wBAAwB;MAAEM,OAAO,EAAEL,QAAQ,CAACI;IAAK,CAAC,CAAC;EACtE,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdR,QAAQ,CAAC;MAAEC,IAAI,EAAE,wBAAwB;MAAEM,OAAO,EAAEC,KAAK,CAACC;IAAQ,CAAC,CAAC;EACtE;AACF,CAAC;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,uBAAuB,GAAIC,QAAQ,IAAK,MAAOX,QAAQ,IAAK;EACrEI,OAAO,CAACC,GAAG,CAAC,oDAAoD,EAAEM,QAAQ,CAAC,CAAC,CAAC;EAC7E,IAAI;IACFX,QAAQ,CAAC;MAAEC,IAAI,EAAE;IAAyB,CAAC,CAAC;IAC5C,MAAMC,QAAQ,GAAG,MAAMN,KAAK,CAACO,GAAG,CAAE,qCAAoCQ,QAAS,EAAC,CAAC;IACjFP,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEH,QAAQ,CAACI,IAAI,CAAC,CAAC,CAAC;IACvDN,QAAQ,CAAC;MACPC,IAAI,EAAE,wBAAwB;MAC9BM,OAAO,EAAEL,QAAQ,CAACI;IACpB,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdJ,OAAO,CAACI,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC,CAAC,CAAC;IAC/CR,QAAQ,CAAC;MACPC,IAAI,EAAE,wBAAwB;MAC9BM,OAAO,EAAEC,KAAK,CAACC;IACjB,CAAC,CAAC;EACJ;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}