{"ast":null,"code":"// // src/redux/types/cartTypes.js\n\n// // src/redux/actions/cartActions.js\n// import axios from 'axios';\n// export const FETCH_CART_ITEMS = 'FETCH_CART_ITEMS';\n// export const ADD_TO_CART = 'ADD_TO_CART';\n// export const REMOVE_FROM_CART = 'REMOVE_FROM_CART';\n// export const UPDATE_CART_QUANTITY = 'UPDATE_CART_QUANTITY';\n\n// export const fetchCartItems = (userId) => async (dispatch) => {\n//   try {\n//     const response = await axios.get(`/cart/addtocart/${userId}`);\n//     dispatch({\n//       type: FETCH_CART_ITEMS,\n//       payload: response.data,\n//     });\n//   } catch (error) {\n//     console.error('Error fetching cart items:', error);\n//   }\n// };\n\n// export const addToCart = (product) => async (dispatch, getState) => {\n//   try {\n//     const { user } = getState().auth; // Assuming you have an auth reducer with user info\n//     if (!user) {\n//       throw new Error('User not authenticated');\n//     }\n\n//     const response = await axios.post('/api/addtocart', {\n//       userId: user._id,\n//       productId: product._id,\n//       quantity: 1, // You can modify this if you want to allow adding multiple quantities\n//     });\n\n//     dispatch({\n//       type: ADD_TO_CART,\n//       payload: {\n//         ...product,\n//         quantity: 1,\n//       },\n//     });\n\n//     // Optionally, you can fetch the updated cart after adding an item\n//     dispatch(fetchCartItems(user._id));\n//   } catch (error) {\n//     console.error('Error adding to cart:', error);\n//     // Handle error (e.g., show an error message to the user)\n//   }\n// };\n// src/redux/cartActions.js\n\n// Add to Cart\n\nimport axios from 'axios';\n\n// Action Types\nexport const GET_CART = 'GET_CART';\nexport const ADD_TO_CART = 'ADD_TO_CART';\nexport const REMOVE_FROM_CART = 'REMOVE_FROM_CART';\nexport const CART_ERROR = 'CART_ERROR';\nconst API_URL = 'http://localhost:4000/cart';\n\n// Action Creators\n\n// Get cart items\nexport const getCart = () => async (dispatch, getState) => {\n  try {\n    const {\n      token\n    } = getState().user; // Get the token from Redux state\n\n    const config = {\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    };\n    const res = await axios.get('http://localhost:4000/cart/getcart', config);\n    dispatch({\n      type: GET_CART,\n      payload: res.data\n    });\n  } catch (error) {\n    var _error$response;\n    dispatch({\n      type: CART_ERROR,\n      payload: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || 'An error occurred'\n    });\n  }\n};\n\n// Add product to cart\nexport const addToCart = product => async (dispatch, getState) => {\n  try {\n    console.log(\"add to car\");\n    const {\n      token\n    } = getState().user; // Get the user's token from the Redux state\n\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}` // Add the token to the Authorization header\n      }\n    };\n\n    const res = await axios.post('http://localhost:4000/cart/addtocart', {\n      itemId: product._id\n    }, config);\n    dispatch({\n      type: ADD_TO_CART,\n      payload: res.data\n    });\n  } catch (error) {\n    var _error$response2;\n    dispatch({\n      type: CART_ERROR,\n      payload: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || 'An error occurred'\n    });\n  }\n};\nexport const removeFromCart = itemId => async dispatch => {\n  try {\n    const res = await axios.delete(`${API_URL}/removefromcart`, {\n      data: {\n        itemId\n      }\n    });\n    dispatch({\n      type: REMOVE_FROM_CART,\n      payload: itemId\n    });\n  } catch (error) {\n    dispatch({\n      type: CART_ERROR,\n      payload: error.response.data\n    });\n  }\n};","map":{"version":3,"names":["axios","GET_CART","ADD_TO_CART","REMOVE_FROM_CART","CART_ERROR","API_URL","getCart","dispatch","getState","token","user","config","headers","res","get","type","payload","data","error","_error$response","response","addToCart","product","console","log","post","itemId","_id","_error$response2","removeFromCart","delete"],"sources":["C:/Users/bhargavi_g/Documents/Nursery_live/frontend/src/redux/actions/cartActions.jsx"],"sourcesContent":["// // src/redux/types/cartTypes.js\r\n\r\n// // src/redux/actions/cartActions.js\r\n// import axios from 'axios';\r\n// export const FETCH_CART_ITEMS = 'FETCH_CART_ITEMS';\r\n// export const ADD_TO_CART = 'ADD_TO_CART';\r\n// export const REMOVE_FROM_CART = 'REMOVE_FROM_CART';\r\n// export const UPDATE_CART_QUANTITY = 'UPDATE_CART_QUANTITY';\r\n\r\n\r\n\r\n// export const fetchCartItems = (userId) => async (dispatch) => {\r\n//   try {\r\n//     const response = await axios.get(`/cart/addtocart/${userId}`);\r\n//     dispatch({\r\n//       type: FETCH_CART_ITEMS,\r\n//       payload: response.data,\r\n//     });\r\n//   } catch (error) {\r\n//     console.error('Error fetching cart items:', error);\r\n//   }\r\n// };\r\n\r\n// export const addToCart = (product) => async (dispatch, getState) => {\r\n//   try {\r\n//     const { user } = getState().auth; // Assuming you have an auth reducer with user info\r\n//     if (!user) {\r\n//       throw new Error('User not authenticated');\r\n//     }\r\n\r\n//     const response = await axios.post('/api/addtocart', {\r\n//       userId: user._id,\r\n//       productId: product._id,\r\n//       quantity: 1, // You can modify this if you want to allow adding multiple quantities\r\n//     });\r\n\r\n//     dispatch({\r\n//       type: ADD_TO_CART,\r\n//       payload: {\r\n//         ...product,\r\n//         quantity: 1,\r\n//       },\r\n//     });\r\n\r\n//     // Optionally, you can fetch the updated cart after adding an item\r\n//     dispatch(fetchCartItems(user._id));\r\n//   } catch (error) {\r\n//     console.error('Error adding to cart:', error);\r\n//     // Handle error (e.g., show an error message to the user)\r\n//   }\r\n// };\r\n// src/redux/cartActions.js\r\n\r\n// Add to Cart\r\n\r\n\r\nimport axios from 'axios';\r\n\r\n// Action Types\r\nexport const GET_CART = 'GET_CART';\r\nexport const ADD_TO_CART = 'ADD_TO_CART';\r\nexport const REMOVE_FROM_CART = 'REMOVE_FROM_CART';\r\nexport const CART_ERROR = 'CART_ERROR';\r\nconst API_URL = 'http://localhost:4000/cart';\r\n\r\n\r\n// Action Creators\r\n\r\n// Get cart items\r\nexport const getCart = () => async (dispatch, getState) => {\r\n  try {\r\n    const { token } = getState().user; // Get the token from Redux state\r\n\r\n    const config = {\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`\r\n      }\r\n    };\r\n\r\n    const res = await axios.get('http://localhost:4000/cart/getcart', config);\r\n\r\n    dispatch({\r\n      type: GET_CART,\r\n      payload: res.data\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: CART_ERROR,\r\n      payload: error.response?.data || 'An error occurred'\r\n    });\r\n  }\r\n};\r\n\r\n// Add product to cart\r\nexport const addToCart = (product) => async (dispatch, getState) => {\r\n  try {\r\n    console.log(\"add to car\")\r\n    const { token } = getState().user; // Get the user's token from the Redux state\r\n\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${token}` // Add the token to the Authorization header\r\n      }\r\n    };\r\n\r\n    const res = await axios.post('http://localhost:4000/cart/addtocart', {\r\n      itemId: product._id\r\n    }, config);\r\n\r\n    dispatch({\r\n      type: ADD_TO_CART,\r\n      payload: res.data\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: CART_ERROR,\r\n      payload: error.response?.data || 'An error occurred'\r\n    });\r\n  }\r\n};\r\n\r\nexport const removeFromCart = (itemId) => async dispatch => {\r\n  try {\r\n    const res = await axios.delete(`${API_URL}/removefromcart`, { data: { itemId } });\r\n    dispatch({\r\n      type: REMOVE_FROM_CART,\r\n      payload: itemId\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: CART_ERROR,\r\n      payload: error.response.data\r\n    });\r\n  }\r\n};\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}