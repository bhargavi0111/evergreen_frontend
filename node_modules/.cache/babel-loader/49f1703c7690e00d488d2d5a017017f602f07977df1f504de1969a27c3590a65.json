{"ast":null,"code":"// import React, { createContext, useState, useEffect } from \"react\";\n// import axios from 'axios';\n\n// // Define getDefaultCart function\n// const getDefaultCart = (products) => {\n//   let cart = {};\n//   for (let index = 0; index < products.length; index++) {\n//     cart[products[index]._id] = 0;\n//   }\n//   return cart;\n// };\n\n// export const ShopContext = createContext(null);\n\n// const ShopContextProvider = (props) => {\n//   const [cartItems, setCartItems] = useState({});\n//   const [products, setProducts] = useState([]);\n\n//   useEffect(() => {\n//     const fetchProducts = async () => {\n//       try {\n//         const response = await axios.get('http://localhost:4000/allproducts');\n//         console.log('Fetched products:', response.data); // Debugging log\n//         setProducts(response.data);\n//         setCartItems(getDefaultCart(response.data)); // Set default cart after fetching products\n//       } catch (error) {\n//         console.error('Error fetching products:', error);\n//       }\n//     };\n\n//     fetchProducts();\n//   }, []);\n\n//   const addToCart = (itemId) => {\n//     setCartItems((prev) => ({ ...prev, [itemId]: (prev[itemId] || 0) + 1 }));\n//   };\n\n//   const removeFromCart = (itemId) => {\n//     setCartItems((prev) => ({ ...prev, [itemId]: (prev[itemId] || 0) - 1 }));\n//   };\n\n//   const getTotalCartAmount = () => {\n//     let totalAmount = 0;\n//     for (const item in cartItems) {\n//       if (cartItems[item] > 0) {\n//         let itemInfo = products.find((product) => product._id === item);\n//         if (itemInfo) {\n//           totalAmount += cartItems[item] * itemInfo.new_price;\n//         }\n//       }\n//     }\n//     return totalAmount;\n//   };\n\n//   const getTotalCartItems = () => {\n//     let totalItem = 0;\n//     for (const item in cartItems) {\n//       if (cartItems[item] > 0) {\n//         totalItem += cartItems[item];\n//       }\n//     }\n//     return totalItem;\n//   };\n\n//   const contextValue = {\n//     getTotalCartItems,\n//     getTotalCartAmount,\n//     products,\n//     cartItems,\n//     addToCart,\n//     removeFromCart\n//   };\n\n//   return (\n//     <ShopContext.Provider value={contextValue}>\n//       {props.children}\n//     </ShopContext.Provider>\n//   );\n// };\n\n// export default ShopContextProvider;","map":{"version":3,"names":[],"sources":["C:/Users/bhargavi_g/Documents/Nursery_live/frontend/src/Context/ShopContext.jsx"],"sourcesContent":["// import React, { createContext, useState, useEffect } from \"react\";\r\n// import axios from 'axios';\r\n\r\n// // Define getDefaultCart function\r\n// const getDefaultCart = (products) => {\r\n//   let cart = {};\r\n//   for (let index = 0; index < products.length; index++) {\r\n//     cart[products[index]._id] = 0;\r\n//   }\r\n//   return cart;\r\n// };\r\n\r\n// export const ShopContext = createContext(null);\r\n\r\n// const ShopContextProvider = (props) => {\r\n//   const [cartItems, setCartItems] = useState({});\r\n//   const [products, setProducts] = useState([]);\r\n\r\n//   useEffect(() => {\r\n//     const fetchProducts = async () => {\r\n//       try {\r\n//         const response = await axios.get('http://localhost:4000/allproducts');\r\n//         console.log('Fetched products:', response.data); // Debugging log\r\n//         setProducts(response.data);\r\n//         setCartItems(getDefaultCart(response.data)); // Set default cart after fetching products\r\n//       } catch (error) {\r\n//         console.error('Error fetching products:', error);\r\n//       }\r\n//     };\r\n\r\n//     fetchProducts();\r\n//   }, []);\r\n\r\n//   const addToCart = (itemId) => {\r\n//     setCartItems((prev) => ({ ...prev, [itemId]: (prev[itemId] || 0) + 1 }));\r\n//   };\r\n\r\n//   const removeFromCart = (itemId) => {\r\n//     setCartItems((prev) => ({ ...prev, [itemId]: (prev[itemId] || 0) - 1 }));\r\n//   };\r\n\r\n//   const getTotalCartAmount = () => {\r\n//     let totalAmount = 0;\r\n//     for (const item in cartItems) {\r\n//       if (cartItems[item] > 0) {\r\n//         let itemInfo = products.find((product) => product._id === item);\r\n//         if (itemInfo) {\r\n//           totalAmount += cartItems[item] * itemInfo.new_price;\r\n//         }\r\n//       }\r\n//     }\r\n//     return totalAmount;\r\n//   };\r\n\r\n//   const getTotalCartItems = () => {\r\n//     let totalItem = 0;\r\n//     for (const item in cartItems) {\r\n//       if (cartItems[item] > 0) {\r\n//         totalItem += cartItems[item];\r\n//       }\r\n//     }\r\n//     return totalItem;\r\n//   };\r\n\r\n//   const contextValue = {\r\n//     getTotalCartItems,\r\n//     getTotalCartAmount,\r\n//     products,\r\n//     cartItems,\r\n//     addToCart,\r\n//     removeFromCart\r\n//   };\r\n\r\n//   return (\r\n//     <ShopContext.Provider value={contextValue}>\r\n//       {props.children}\r\n//     </ShopContext.Provider>\r\n//   );\r\n// };\r\n\r\n// export default ShopContextProvider;\r\n"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}